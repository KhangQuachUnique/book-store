<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/model/Address.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Address.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;&#10;import java.io.Serializable;&#10;import java.sql.Timestamp;&#10;&#10;@Data&#10;@Entity&#10;@Table(name = &quot;addresses&quot;)&#10;public class Address implements Serializable {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private long id;&#10;&#10;    @Column(name = &quot;userId&quot;, insertable = false, updatable = false)&#10;    private long userId;&#10;&#10;    @Column(name = &quot;address&quot;, nullable = false)&#10;    private String address;&#10;&#10;    @Column(name = &quot;isDefault&quot;)&#10;    private boolean isDefaultAddress;&#10;&#10;    @Column(name = &quot;createdAt&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;userId&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @Override&#10;    public String toString() {&#10;        return this.address;&#10;    }&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;&#10;import java.io.Serializable;&#10;import java.sql.Timestamp;&#10;&#10;@Data&#10;@Entity&#10;@Table(name = &quot;\&quot;addresses\&quot;&quot;)&#10;public class Address implements Serializable {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private long id;&#10;&#10;    @Column(name = &quot;\&quot;userId\&quot;&quot;, insertable = false, updatable = false)&#10;    private long userId;&#10;&#10;    @Column(name = &quot;\&quot;address\&quot;&quot;, nullable = false)&#10;    private String address;&#10;&#10;    @Column(name = &quot;\&quot;isDefault\&quot;&quot;)&#10;    private boolean isDefaultAddress;&#10;&#10;    @Column(name = &quot;\&quot;createdAt\&quot;&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;userId\&quot;&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @Override&#10;    public String toString() {&#10;        return this.address;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/Book.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Book.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Max;&#10;import jakarta.validation.constraints.Min;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;books&quot;)&#10;public class Book {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Integer id;&#10;&#10;    @NotNull(message = &quot;Title is required&quot;)&#10;    @Size(min = 1, max = 255, message = &quot;Title must be between 1 and 255 characters&quot;)&#10;    @Column(name = &quot;title&quot;, nullable = false)&#10;    private String title;&#10;&#10;    @Column(name = &quot;author&quot;)&#10;    private String author;&#10;&#10;    @Column(name = &quot;publisher&quot;)&#10;    private String publisher;&#10;&#10;    @Column(name = &quot;thumbnailUrl&quot;)&#10;    private String thumbnailUrl;&#10;&#10;    @Column(name = &quot;description&quot;)&#10;    private String description;&#10;&#10;    @Column(name = &quot;publishYear&quot;)&#10;    private Integer publishYear;&#10;&#10;    @Column(name = &quot;pages&quot;)&#10;    private Integer pages;&#10;&#10;    @Column(name = &quot;originalPrice&quot;)&#10;    private double originalPrice;&#10;&#10;    @Column(name = &quot;discountRate&quot;)&#10;    @Min(value = 0, message = &quot;Discount rate must be non-negative&quot;)&#10;    @Max(value = 100, message = &quot;Discount rate must not exceed 100&quot;)&#10;    private int discountRate;&#10;&#10;    @Column(name = &quot;stock&quot;)&#10;    @Min(value = 0, message = &quot;Stock must be non-negative&quot;)&#10;    private int stock;&#10;&#10;    @Column(name = &quot;rating&quot;)&#10;    @Min(value = 0, message = &quot;Rating must be non-negative&quot;)&#10;    @Max(value = 5, message = &quot;Rating must not exceed 5&quot;)&#10;    private double rating;&#10;&#10;    @Transient&#10;    private Integer fullStars;&#10;    @Transient&#10;    private Double partialFraction;&#10;    @Transient&#10;    private Integer emptyStars;&#10;&#10;    @Column(name = &quot;price&quot;)&#10;    @Min(value = 0, message = &quot;Price must be non-negative&quot;)&#10;    private double price;&#10;&#10;    @Column(name = &quot;createdAt&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;categoryId&quot;, nullable = false)&#10;    private Category category;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Review&gt; reviews;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;OrderItem&gt; orderItems;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;CartItem&gt; cartItems;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;WishlistItem&gt; wishlistItems;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;LikeReview&gt; likeReviews;&#10;&#10;    public void calculateStars() {&#10;        this.fullStars = (int) rating;&#10;        this.partialFraction = rating - fullStars;&#10;        this.emptyStars = (partialFraction &gt; 0) ? (4 - fullStars) : (5 - fullStars);&#10;    }&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Max;&#10;import jakarta.validation.constraints.Min;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;books\&quot;&quot;)&#10;public class Book {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Integer id;&#10;&#10;    @NotNull(message = &quot;Title is required&quot;)&#10;    @Size(min = 1, max = 255, message = &quot;Title must be between 1 and 255 characters&quot;)&#10;    @Column(name = &quot;\&quot;title\&quot;&quot;, nullable = false)&#10;    private String title;&#10;&#10;    @Column(name = &quot;\&quot;author\&quot;&quot;)&#10;    private String author;&#10;&#10;    @Column(name = &quot;\&quot;publisher\&quot;&quot;)&#10;    private String publisher;&#10;&#10;    @Column(name = &quot;\&quot;thumbnailUrl\&quot;&quot;)&#10;    private String thumbnailUrl;&#10;&#10;    @Column(name = &quot;\&quot;description\&quot;&quot;)&#10;    private String description;&#10;&#10;    @Column(name = &quot;\&quot;publishYear\&quot;&quot;)&#10;    private Integer publishYear;&#10;&#10;    @Column(name = &quot;\&quot;pages\&quot;&quot;)&#10;    private Integer pages;&#10;&#10;    @Column(name = &quot;\&quot;originalPrice\&quot;&quot;)&#10;    private double originalPrice;&#10;&#10;    @Column(name = &quot;\&quot;discountRate\&quot;&quot;)&#10;    @Min(value = 0, message = &quot;Discount rate must be non-negative&quot;)&#10;    @Max(value = 100, message = &quot;Discount rate must not exceed 100&quot;)&#10;    private int discountRate;&#10;&#10;    @Column(name = &quot;\&quot;stock\&quot;&quot;)&#10;    @Min(value = 0, message = &quot;Stock must be non-negative&quot;)&#10;    private int stock;&#10;&#10;    @Column(name = &quot;\&quot;rating\&quot;&quot;)&#10;    @Min(value = 0, message = &quot;Rating must be non-negative&quot;)&#10;    @Max(value = 5, message = &quot;Rating must not exceed 5&quot;)&#10;    private double rating;&#10;&#10;    @Transient&#10;    private Integer fullStars;&#10;    @Transient&#10;    private Double partialFraction;&#10;    @Transient&#10;    private Integer emptyStars;&#10;&#10;    @Column(name = &quot;\&quot;price\&quot;&quot;)&#10;    @Min(value = 0, message = &quot;Price must be non-negative&quot;)&#10;    private double price;&#10;&#10;    @Column(name = &quot;\&quot;createdAt\&quot;&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;categoryId\&quot;&quot;, nullable = false)&#10;    private Category category;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Review&gt; reviews;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;OrderItem&gt; orderItems;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;CartItem&gt; cartItems;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;WishlistItem&gt; wishlistItems;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;LikeReview&gt; likeReviews;&#10;&#10;    public void calculateStars() {&#10;        this.fullStars = (int) rating;&#10;        this.partialFraction = rating - fullStars;&#10;        this.emptyStars = (partialFraction &gt; 0) ? (4 - fullStars) : (5 - fullStars);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/Category.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Category.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;categories&quot;)&#10;public class Category {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private long id;&#10;&#10;    @Column(name = &quot;name&quot;, nullable = false)&#10;    private String name;&#10;&#10;    @Column(name = &quot;isLeaf&quot;)&#10;    private boolean isLeaf;&#10;&#10;    @Column(name = &quot;createdAt&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;parentId&quot;)&#10;    private Category parent;&#10;&#10;    @OneToMany(mappedBy = &quot;parent&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Category&gt; children;&#10;&#10;    @OneToMany(mappedBy = &quot;category&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Book&gt; books;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;categories\&quot;&quot;)&#10;public class Category {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private long id;&#10;&#10;    @Column(name = &quot;\&quot;name\&quot;&quot;, nullable = false)&#10;    private String name;&#10;&#10;    @Column(name = &quot;\&quot;isLeaf\&quot;&quot;)&#10;    private boolean isLeaf;&#10;&#10;    @Column(name = &quot;\&quot;createdAt\&quot;&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;parentId\&quot;&quot;)&#10;    private Category parent;&#10;&#10;    @OneToMany(mappedBy = &quot;parent&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Category&gt; children;&#10;&#10;    @OneToMany(mappedBy = &quot;category&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Book&gt; books;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/LikeReview.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/LikeReview.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;likeReviews&quot;)&#10;public class LikeReview {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;userId&quot;, insertable = false, updatable = false)&#10;    private Long userId;&#10;&#10;    @Column(name = &quot;bookId&quot;, insertable = false, updatable = false)&#10;    private Long bookId;&#10;&#10;    @Column(name = &quot;reviewId&quot;, insertable = false, updatable = false)&#10;    private Long reviewId;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;userId&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;bookId&quot;, nullable = false)&#10;    private Book book;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;reviewId&quot;, nullable = false)&#10;    private Review review;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;likeReviews\&quot;&quot;)&#10;public class LikeReview {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;\&quot;userId\&quot;&quot;, insertable = false, updatable = false)&#10;    private Long userId;&#10;&#10;    @Column(name = &quot;\&quot;bookId\&quot;&quot;, insertable = false, updatable = false)&#10;    private Long bookId;&#10;&#10;    @Column(name = &quot;\&quot;reviewId\&quot;&quot;, insertable = false, updatable = false)&#10;    private Long reviewId;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;userId\&quot;&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;bookId\&quot;&quot;, nullable = false)&#10;    private Book book;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;reviewId\&quot;&quot;, nullable = false)&#10;    private Review review;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/OrderStatus.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/OrderStatus.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;order_statuses&quot;)&#10;public class OrderStatus {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;statusName&quot;, nullable = false)&#10;    private String statusName;&#10;&#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;status&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;orderStatuses\&quot;&quot;)&#10;public class OrderStatus {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;\&quot;statusName\&quot;&quot;, nullable = false)&#10;    private String statusName;&#10;&#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;status&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/Promotion.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Promotion.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;promotions&quot;)&#10;public class Promotion {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;code&quot;, unique = true, nullable = false)&#10;    private String code;&#10;&#10;    @Column(name = &quot;discount&quot;)&#10;    private double discount;&#10;&#10;    @Column(name = &quot;expireAt&quot;)&#10;    private Timestamp expireAt;&#10;&#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;promotion&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;promotions\&quot;&quot;)&#10;public class Promotion {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;\&quot;code\&quot;&quot;, unique = true, nullable = false)&#10;    private String code;&#10;&#10;    @Column(name = &quot;\&quot;discount\&quot;&quot;)&#10;    private double discount;&#10;&#10;    @Column(name = &quot;\&quot;expireAt\&quot;&quot;)&#10;    private Timestamp expireAt;&#10;&#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;promotion&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/Review.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Review.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;reviews&quot;)&#10;public class Review {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;rating&quot;)&#10;    private double rating;&#10;&#10;    @Column(name = &quot;comment&quot;)&#10;    private String comment;&#10;&#10;    @Column(name = &quot;createdAt&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;bookId&quot;, nullable = false)&#10;    private Book book;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;userId&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @OneToMany(mappedBy = &quot;review&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;LikeReview&gt; likes;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;reviews\&quot;&quot;)&#10;public class Review {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;\&quot;rating\&quot;&quot;)&#10;    private double rating;&#10;&#10;    @Column(name = &quot;\&quot;comment\&quot;&quot;)&#10;    private String comment;&#10;&#10;    @Column(name = &quot;\&quot;createdAt\&quot;&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;bookId\&quot;&quot;, nullable = false)&#10;    private Book book;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;userId\&quot;&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @OneToMany(mappedBy = &quot;review&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;LikeReview&gt; likes;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/User.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;public class User {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotBlank(message = &quot;Name cannot be empty&quot;)&#10;    @Column(name = &quot;name&quot;, nullable = false)&#10;    private String name;&#10;&#10;    @NotBlank(message = &quot;Email cannot be empty&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    @Column(name = &quot;email&quot;, nullable = false, unique = true)&#10;    private String email;&#10;&#10;    @Column(name = &quot;passwordHash&quot;, nullable = false)&#10;    private String passwordHash;&#10;&#10;    @Column(name = &quot;phoneNumber&quot;)&#10;    private String phoneNumber;&#10;&#10;    @Column(name = &quot;role&quot;, nullable = false)&#10;    private String role;&#10;&#10;    @Column(name = &quot;avatarUrl&quot;)&#10;    private String avatarUrl;&#10;&#10;    @Column(name = &quot;isBlocked&quot;)&#10;    private Boolean isBlocked;&#10;&#10;    @Column(name = &quot;blockedUntil&quot;)&#10;    private Timestamp blockedUntil;&#10;&#10;    @Column(name = &quot;createdAt&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    @Column(name = &quot;updatedAt&quot;)&#10;    private Timestamp updatedAt;&#10;&#10;    @Column(name = &quot;isVerified&quot;)&#10;    private Boolean isVerified;&#10;&#10;    @Column(name = &quot;verifyToken&quot;)&#10;    private String verifyToken;&#10;&#10;    @Column(name = &quot;verifyExpire&quot;)&#10;    private Timestamp verifyExpire;&#10;&#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Notification&gt; notifications;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Address&gt; addresses;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders;&#10;&#10;    @OneToOne(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private Cart cart;&#10;&#10;    @OneToOne(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private Wishlist wishlist;&#10;&#10;    /**&#10;     * Trả về bản User &quot;safe&quot;, không có passwordHash&#10;     */&#10;    public User safeUser() {&#10;        User safe = new User();&#10;        safe.setId(this.id);&#10;        safe.setName(this.name);&#10;        safe.setEmail(this.email);&#10;        safe.setPhoneNumber(this.phoneNumber);&#10;        safe.setRole(this.role);&#10;        safe.setAvatarUrl(this.avatarUrl);&#10;        safe.setIsBlocked(this.isBlocked);&#10;        safe.setBlockedUntil(this.blockedUntil);&#10;        safe.setCreatedAt(this.createdAt);&#10;        safe.setUpdatedAt(this.updatedAt);&#10;        safe.setIsVerified(this.isVerified);&#10;        safe.setVerifyToken(this.verifyToken);&#10;        safe.setVerifyExpire(this.verifyExpire);&#10;        safe.setAddresses(this.addresses);&#10;&#10;        // Không set passwordHash&#10;        safe.setPasswordHash(null);&#10;        return safe;&#10;    }&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;users\&quot;&quot;)&#10;public class User {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Long id;&#10;&#10;    @NotBlank(message = &quot;Name cannot be empty&quot;)&#10;    @Column(name = &quot;\&quot;name\&quot;&quot;, nullable = false)&#10;    private String name;&#10;&#10;    @NotBlank(message = &quot;Email cannot be empty&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    @Column(name = &quot;\&quot;email\&quot;&quot;, nullable = false, unique = true)&#10;    private String email;&#10;&#10;    @Column(name = &quot;\&quot;passwordHash\&quot;&quot;, nullable = false)&#10;    private String passwordHash;&#10;&#10;    @Column(name = &quot;\&quot;phoneNumber\&quot;&quot;)&#10;    private String phoneNumber;&#10;&#10;    @Column(name = &quot;\&quot;role\&quot;&quot;, nullable = false)&#10;    private String role;&#10;&#10;    @Column(name = &quot;\&quot;avatarUrl\&quot;&quot;)&#10;    private String avatarUrl;&#10;&#10;    @Column(name = &quot;\&quot;isBlocked\&quot;&quot;)&#10;    private Boolean isBlocked;&#10;&#10;    @Column(name = &quot;\&quot;blockedUntil\&quot;&quot;)&#10;    private Timestamp blockedUntil;&#10;&#10;    @Column(name = &quot;\&quot;createdAt\&quot;&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    @Column(name = &quot;\&quot;updatedAt\&quot;&quot;)&#10;    private Timestamp updatedAt;&#10;&#10;    @Column(name = &quot;\&quot;isVerified\&quot;&quot;)&#10;    private Boolean isVerified;&#10;&#10;    @Column(name = &quot;\&quot;verifyToken\&quot;&quot;)&#10;    private String verifyToken;&#10;&#10;    @Column(name = &quot;\&quot;verifyExpire\&quot;&quot;)&#10;    private Timestamp verifyExpire;&#10;&#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Notification&gt; notifications;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Address&gt; addresses;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders;&#10;&#10;    @OneToOne(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private Cart cart;&#10;&#10;    @OneToOne(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private Wishlist wishlist;&#10;&#10;    /**&#10;     * Trả về bản User &quot;safe&quot;, không có passwordHash&#10;     */&#10;    public User safeUser() {&#10;        User safe = new User();&#10;        safe.setId(this.id);&#10;        safe.setName(this.name);&#10;        safe.setEmail(this.email);&#10;        safe.setPhoneNumber(this.phoneNumber);&#10;        safe.setRole(this.role);&#10;        safe.setAvatarUrl(this.avatarUrl);&#10;        safe.setIsBlocked(this.isBlocked);&#10;        safe.setBlockedUntil(this.blockedUntil);&#10;        safe.setCreatedAt(this.createdAt);&#10;        safe.setUpdatedAt(this.updatedAt);&#10;        safe.setIsVerified(this.isVerified);&#10;        safe.setVerifyToken(this.verifyToken);&#10;        safe.setVerifyExpire(this.verifyExpire);&#10;        safe.setAddresses(this.addresses);&#10;&#10;        // Không set passwordHash&#10;        safe.setPasswordHash(null);&#10;        return safe;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/Wishlist.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Wishlist.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;wishlists&quot;)&#10;public class Wishlist {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    // Relationships&#10;    @OneToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;userId\&quot;&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @OneToMany(mappedBy = &quot;wishlist&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;WishlistItem&gt; items;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;wishlists\&quot;&quot;)&#10;public class Wishlist {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    // Relationships&#10;    @OneToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;userId\&quot;&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @OneToMany(mappedBy = &quot;wishlist&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;WishlistItem&gt; items;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/WishlistItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/WishlistItem.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;wishlistItems\&quot;&quot;)&#10;public class WishlistItem {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;addedAt&quot;)&#10;    private Timestamp addedAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;bookId&quot;, nullable = false)&#10;    private Book book;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;wishlistId&quot;, nullable = false)&#10;    private Wishlist wishlist;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;wishlistItems\&quot;&quot;)&#10;public class WishlistItem {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;\&quot;addedAt\&quot;&quot;)&#10;    private Timestamp addedAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;bookId\&quot;&quot;, nullable = false)&#10;    private Book book;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;wishlistId\&quot;&quot;, nullable = false)&#10;    private Wishlist wishlist;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>