<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/model/Address.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Address.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;&#10;import java.io.Serializable;&#10;import java.sql.Timestamp;&#10;&#10;@Data&#10;@Entity&#10;@Table(name = &quot;addresses&quot;)&#10;public class Address implements Serializable {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private long id;&#10;&#10;    @Column(name = &quot;userId&quot;, insertable = false, updatable = false)&#10;    private long userId;&#10;&#10;    @Column(name = &quot;address&quot;, nullable = false)&#10;    private String address;&#10;&#10;    @Column(name = &quot;isDefault&quot;)&#10;    private boolean isDefaultAddress;&#10;&#10;    @Column(name = &quot;createdAt&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;userId&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @Override&#10;    public String toString() {&#10;        return this.address;&#10;    }&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Data;&#10;&#10;import java.io.Serializable;&#10;import java.sql.Timestamp;&#10;&#10;@Data&#10;@Entity&#10;@Table(name = &quot;\&quot;addresses\&quot;&quot;)&#10;public class Address implements Serializable {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private long id;&#10;&#10;    @Column(name = &quot;\&quot;userId\&quot;&quot;, insertable = false, updatable = false)&#10;    private long userId;&#10;&#10;    @Column(name = &quot;\&quot;address\&quot;&quot;, nullable = false)&#10;    private String address;&#10;&#10;    @Column(name = &quot;\&quot;isDefault\&quot;&quot;)&#10;    private boolean isDefaultAddress;&#10;&#10;    @Column(name = &quot;\&quot;createdAt\&quot;&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;userId\&quot;&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @Override&#10;    public String toString() {&#10;        return this.address;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/Book.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Book.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Max;&#10;import jakarta.validation.constraints.Min;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;books&quot;)&#10;public class Book {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Integer id;&#10;&#10;    @NotNull(message = &quot;Title is required&quot;)&#10;    @Size(min = 1, max = 255, message = &quot;Title must be between 1 and 255 characters&quot;)&#10;    @Column(name = &quot;title&quot;, nullable = false)&#10;    private String title;&#10;&#10;    @Column(name = &quot;author&quot;)&#10;    private String author;&#10;&#10;    @Column(name = &quot;publisher&quot;)&#10;    private String publisher;&#10;&#10;    @Column(name = &quot;thumbnailUrl&quot;)&#10;    private String thumbnailUrl;&#10;&#10;    @Column(name = &quot;description&quot;)&#10;    private String description;&#10;&#10;    @Column(name = &quot;publishYear&quot;)&#10;    private Integer publishYear;&#10;&#10;    @Column(name = &quot;pages&quot;)&#10;    private Integer pages;&#10;&#10;    @Column(name = &quot;originalPrice&quot;)&#10;    private double originalPrice;&#10;&#10;    @Column(name = &quot;discountRate&quot;)&#10;    @Min(value = 0, message = &quot;Discount rate must be non-negative&quot;)&#10;    @Max(value = 100, message = &quot;Discount rate must not exceed 100&quot;)&#10;    private int discountRate;&#10;&#10;    @Column(name = &quot;stock&quot;)&#10;    @Min(value = 0, message = &quot;Stock must be non-negative&quot;)&#10;    private int stock;&#10;&#10;    @Column(name = &quot;rating&quot;)&#10;    @Min(value = 0, message = &quot;Rating must be non-negative&quot;)&#10;    @Max(value = 5, message = &quot;Rating must not exceed 5&quot;)&#10;    private double rating;&#10;&#10;    @Transient&#10;    private Integer fullStars;&#10;    @Transient&#10;    private Double partialFraction;&#10;    @Transient&#10;    private Integer emptyStars;&#10;&#10;    @Column(name = &quot;price&quot;)&#10;    @Min(value = 0, message = &quot;Price must be non-negative&quot;)&#10;    private double price;&#10;&#10;    @Column(name = &quot;createdAt&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;categoryId&quot;, nullable = false)&#10;    private Category category;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Review&gt; reviews;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;OrderItem&gt; orderItems;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;CartItem&gt; cartItems;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;WishlistItem&gt; wishlistItems;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;LikeReview&gt; likeReviews;&#10;&#10;    public void calculateStars() {&#10;        this.fullStars = (int) rating;&#10;        this.partialFraction = rating - fullStars;&#10;        this.emptyStars = (partialFraction &gt; 0) ? (4 - fullStars) : (5 - fullStars);&#10;    }&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Max;&#10;import jakarta.validation.constraints.Min;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;books\&quot;&quot;)&#10;public class Book {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Integer id;&#10;&#10;    @NotNull(message = &quot;Title is required&quot;)&#10;    @Size(min = 1, max = 255, message = &quot;Title must be between 1 and 255 characters&quot;)&#10;    @Column(name = &quot;\&quot;title\&quot;&quot;, nullable = false)&#10;    private String title;&#10;&#10;    @Column(name = &quot;\&quot;author\&quot;&quot;)&#10;    private String author;&#10;&#10;    @Column(name = &quot;\&quot;publisher\&quot;&quot;)&#10;    private String publisher;&#10;&#10;    @Column(name = &quot;\&quot;thumbnailUrl\&quot;&quot;)&#10;    private String thumbnailUrl;&#10;&#10;    @Column(name = &quot;\&quot;description\&quot;&quot;)&#10;    private String description;&#10;&#10;    @Column(name = &quot;\&quot;publishYear\&quot;&quot;)&#10;    private Integer publishYear;&#10;&#10;    @Column(name = &quot;\&quot;pages\&quot;&quot;)&#10;    private Integer pages;&#10;&#10;    @Column(name = &quot;\&quot;originalPrice\&quot;&quot;)&#10;    private double originalPrice;&#10;&#10;    @Column(name = &quot;\&quot;discountRate\&quot;&quot;)&#10;    @Min(value = 0, message = &quot;Discount rate must be non-negative&quot;)&#10;    @Max(value = 100, message = &quot;Discount rate must not exceed 100&quot;)&#10;    private int discountRate;&#10;&#10;    @Column(name = &quot;\&quot;stock\&quot;&quot;)&#10;    @Min(value = 0, message = &quot;Stock must be non-negative&quot;)&#10;    private int stock;&#10;&#10;    @Column(name = &quot;\&quot;rating\&quot;&quot;)&#10;    @Min(value = 0, message = &quot;Rating must be non-negative&quot;)&#10;    @Max(value = 5, message = &quot;Rating must not exceed 5&quot;)&#10;    private double rating;&#10;&#10;    @Transient&#10;    private Integer fullStars;&#10;    @Transient&#10;    private Double partialFraction;&#10;    @Transient&#10;    private Integer emptyStars;&#10;&#10;    @Column(name = &quot;\&quot;price\&quot;&quot;)&#10;    @Min(value = 0, message = &quot;Price must be non-negative&quot;)&#10;    private double price;&#10;&#10;    @Column(name = &quot;\&quot;createdAt\&quot;&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;categoryId\&quot;&quot;, nullable = false)&#10;    private Category category;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Review&gt; reviews;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;OrderItem&gt; orderItems;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;CartItem&gt; cartItems;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;WishlistItem&gt; wishlistItems;&#10;&#10;    @OneToMany(mappedBy = &quot;book&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;LikeReview&gt; likeReviews;&#10;&#10;    public void calculateStars() {&#10;        this.fullStars = (int) rating;&#10;        this.partialFraction = rating - fullStars;&#10;        this.emptyStars = (partialFraction &gt; 0) ? (4 - fullStars) : (5 - fullStars);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/Category.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Category.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;categories&quot;)&#10;public class Category {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private long id;&#10;&#10;    @Column(name = &quot;name&quot;, nullable = false)&#10;    private String name;&#10;&#10;    @Column(name = &quot;isLeaf&quot;)&#10;    private boolean isLeaf;&#10;&#10;    @Column(name = &quot;createdAt&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;parentId&quot;)&#10;    private Category parent;&#10;&#10;    @OneToMany(mappedBy = &quot;parent&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Category&gt; children;&#10;&#10;    @OneToMany(mappedBy = &quot;category&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Book&gt; books;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;categories\&quot;&quot;)&#10;public class Category {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private long id;&#10;&#10;    @Column(name = &quot;\&quot;name\&quot;&quot;, nullable = false)&#10;    private String name;&#10;&#10;    @Column(name = &quot;\&quot;isLeaf\&quot;&quot;)&#10;    private boolean isLeaf;&#10;&#10;    @Column(name = &quot;\&quot;createdAt\&quot;&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;parentId\&quot;&quot;)&#10;    private Category parent;&#10;&#10;    @OneToMany(mappedBy = &quot;parent&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Category&gt; children;&#10;&#10;    @OneToMany(mappedBy = &quot;category&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Book&gt; books;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/LikeReview.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/LikeReview.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;likeReviews&quot;)&#10;public class LikeReview {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;userId&quot;, insertable = false, updatable = false)&#10;    private Long userId;&#10;&#10;    @Column(name = &quot;bookId&quot;, insertable = false, updatable = false)&#10;    private Long bookId;&#10;&#10;    @Column(name = &quot;reviewId&quot;, insertable = false, updatable = false)&#10;    private Long reviewId;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;userId&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;bookId&quot;, nullable = false)&#10;    private Book book;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;reviewId&quot;, nullable = false)&#10;    private Review review;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;likeReviews\&quot;&quot;)&#10;public class LikeReview {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;\&quot;userId\&quot;&quot;, insertable = false, updatable = false)&#10;    private Long userId;&#10;&#10;    @Column(name = &quot;\&quot;bookId\&quot;&quot;, insertable = false, updatable = false)&#10;    private Long bookId;&#10;&#10;    @Column(name = &quot;\&quot;reviewId\&quot;&quot;, insertable = false, updatable = false)&#10;    private Long reviewId;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;userId\&quot;&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;bookId\&quot;&quot;, nullable = false)&#10;    private Book book;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;reviewId\&quot;&quot;, nullable = false)&#10;    private Review review;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/OrderStatus.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/OrderStatus.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;order_statuses&quot;)&#10;public class OrderStatus {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;statusName&quot;, nullable = false)&#10;    private String statusName;&#10;&#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;status&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;orderStatuses\&quot;&quot;)&#10;public class OrderStatus {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;\&quot;statusName\&quot;&quot;, nullable = false)&#10;    private String statusName;&#10;&#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;status&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/Promotion.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Promotion.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;promotions&quot;)&#10;public class Promotion {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;code&quot;, unique = true, nullable = false)&#10;    private String code;&#10;&#10;    @Column(name = &quot;discount&quot;)&#10;    private double discount;&#10;&#10;    @Column(name = &quot;expireAt&quot;)&#10;    private Timestamp expireAt;&#10;&#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;promotion&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;promotions\&quot;&quot;)&#10;public class Promotion {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;\&quot;code\&quot;&quot;, unique = true, nullable = false)&#10;    private String code;&#10;&#10;    @Column(name = &quot;\&quot;discount\&quot;&quot;)&#10;    private double discount;&#10;&#10;    @Column(name = &quot;\&quot;expireAt\&quot;&quot;)&#10;    private Timestamp expireAt;&#10;&#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;promotion&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/Review.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Review.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;reviews&quot;)&#10;public class Review {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;rating&quot;)&#10;    private double rating;&#10;&#10;    @Column(name = &quot;comment&quot;)&#10;    private String comment;&#10;&#10;    @Column(name = &quot;createdAt&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;bookId&quot;, nullable = false)&#10;    private Book book;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;userId&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @OneToMany(mappedBy = &quot;review&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;LikeReview&gt; likes;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;reviews\&quot;&quot;)&#10;public class Review {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;\&quot;rating\&quot;&quot;)&#10;    private double rating;&#10;&#10;    @Column(name = &quot;\&quot;comment\&quot;&quot;)&#10;    private String comment;&#10;&#10;    @Column(name = &quot;\&quot;createdAt\&quot;&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;bookId\&quot;&quot;, nullable = false)&#10;    private Book book;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;userId\&quot;&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @OneToMany(mappedBy = &quot;review&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;LikeReview&gt; likes;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/User.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;public class User {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotBlank(message = &quot;Name cannot be empty&quot;)&#10;    @Column(name = &quot;name&quot;, nullable = false)&#10;    private String name;&#10;&#10;    @NotBlank(message = &quot;Email cannot be empty&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    @Column(name = &quot;email&quot;, nullable = false, unique = true)&#10;    private String email;&#10;&#10;    @Column(name = &quot;passwordHash&quot;, nullable = false)&#10;    private String passwordHash;&#10;&#10;    @Column(name = &quot;phoneNumber&quot;)&#10;    private String phoneNumber;&#10;&#10;    @Column(name = &quot;role&quot;, nullable = false)&#10;    private String role;&#10;&#10;    @Column(name = &quot;avatarUrl&quot;)&#10;    private String avatarUrl;&#10;&#10;    @Column(name = &quot;isBlocked&quot;)&#10;    private Boolean isBlocked;&#10;&#10;    @Column(name = &quot;blockedUntil&quot;)&#10;    private Timestamp blockedUntil;&#10;&#10;    @Column(name = &quot;createdAt&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    @Column(name = &quot;updatedAt&quot;)&#10;    private Timestamp updatedAt;&#10;&#10;    @Column(name = &quot;isVerified&quot;)&#10;    private Boolean isVerified;&#10;&#10;    @Column(name = &quot;verifyToken&quot;)&#10;    private String verifyToken;&#10;&#10;    @Column(name = &quot;verifyExpire&quot;)&#10;    private Timestamp verifyExpire;&#10;&#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Notification&gt; notifications;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Address&gt; addresses;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders;&#10;&#10;    @OneToOne(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private Cart cart;&#10;&#10;    @OneToOne(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private Wishlist wishlist;&#10;&#10;    /**&#10;     * Trả về bản User &quot;safe&quot;, không có passwordHash&#10;     */&#10;    public User safeUser() {&#10;        User safe = new User();&#10;        safe.setId(this.id);&#10;        safe.setName(this.name);&#10;        safe.setEmail(this.email);&#10;        safe.setPhoneNumber(this.phoneNumber);&#10;        safe.setRole(this.role);&#10;        safe.setAvatarUrl(this.avatarUrl);&#10;        safe.setIsBlocked(this.isBlocked);&#10;        safe.setBlockedUntil(this.blockedUntil);&#10;        safe.setCreatedAt(this.createdAt);&#10;        safe.setUpdatedAt(this.updatedAt);&#10;        safe.setIsVerified(this.isVerified);&#10;        safe.setVerifyToken(this.verifyToken);&#10;        safe.setVerifyExpire(this.verifyExpire);&#10;        safe.setAddresses(this.addresses);&#10;&#10;        // Không set passwordHash&#10;        safe.setPasswordHash(null);&#10;        return safe;&#10;    }&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;users\&quot;&quot;)&#10;public class User {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Long id;&#10;&#10;    @NotBlank(message = &quot;Name cannot be empty&quot;)&#10;    @Column(name = &quot;\&quot;name\&quot;&quot;, nullable = false)&#10;    private String name;&#10;&#10;    @NotBlank(message = &quot;Email cannot be empty&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    @Column(name = &quot;\&quot;email\&quot;&quot;, nullable = false, unique = true)&#10;    private String email;&#10;&#10;    @Column(name = &quot;\&quot;passwordHash\&quot;&quot;, nullable = false)&#10;    private String passwordHash;&#10;&#10;    @Column(name = &quot;\&quot;phoneNumber\&quot;&quot;)&#10;    private String phoneNumber;&#10;&#10;    @Column(name = &quot;\&quot;role\&quot;&quot;, nullable = false)&#10;    private String role;&#10;&#10;    @Column(name = &quot;\&quot;avatarUrl\&quot;&quot;)&#10;    private String avatarUrl;&#10;&#10;    @Column(name = &quot;\&quot;isBlocked\&quot;&quot;)&#10;    private Boolean isBlocked;&#10;&#10;    @Column(name = &quot;\&quot;blockedUntil\&quot;&quot;)&#10;    private Timestamp blockedUntil;&#10;&#10;    @Column(name = &quot;\&quot;createdAt\&quot;&quot;)&#10;    private Timestamp createdAt;&#10;&#10;    @Column(name = &quot;\&quot;updatedAt\&quot;&quot;)&#10;    private Timestamp updatedAt;&#10;&#10;    @Column(name = &quot;\&quot;isVerified\&quot;&quot;)&#10;    private Boolean isVerified;&#10;&#10;    @Column(name = &quot;\&quot;verifyToken\&quot;&quot;)&#10;    private String verifyToken;&#10;&#10;    @Column(name = &quot;\&quot;verifyExpire\&quot;&quot;)&#10;    private Timestamp verifyExpire;&#10;&#10;    // Relationships&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Notification&gt; notifications;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Address&gt; addresses;&#10;&#10;    @OneToMany(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;Order&gt; orders;&#10;&#10;    @OneToOne(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private Cart cart;&#10;&#10;    @OneToOne(mappedBy = &quot;user&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private Wishlist wishlist;&#10;&#10;    /**&#10;     * Trả về bản User &quot;safe&quot;, không có passwordHash&#10;     */&#10;    public User safeUser() {&#10;        User safe = new User();&#10;        safe.setId(this.id);&#10;        safe.setName(this.name);&#10;        safe.setEmail(this.email);&#10;        safe.setPhoneNumber(this.phoneNumber);&#10;        safe.setRole(this.role);&#10;        safe.setAvatarUrl(this.avatarUrl);&#10;        safe.setIsBlocked(this.isBlocked);&#10;        safe.setBlockedUntil(this.blockedUntil);&#10;        safe.setCreatedAt(this.createdAt);&#10;        safe.setUpdatedAt(this.updatedAt);&#10;        safe.setIsVerified(this.isVerified);&#10;        safe.setVerifyToken(this.verifyToken);&#10;        safe.setVerifyExpire(this.verifyExpire);&#10;        safe.setAddresses(this.addresses);&#10;&#10;        // Không set passwordHash&#10;        safe.setPasswordHash(null);&#10;        return safe;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/Wishlist.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Wishlist.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;wishlists&quot;)&#10;public class Wishlist {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    // Relationships&#10;    @OneToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;userId\&quot;&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @OneToMany(mappedBy = &quot;wishlist&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;WishlistItem&gt; items;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;wishlists\&quot;&quot;)&#10;public class Wishlist {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    // Relationships&#10;    @OneToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;userId\&quot;&quot;, nullable = false)&#10;    private User user;&#10;&#10;    @OneToMany(mappedBy = &quot;wishlist&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;WishlistItem&gt; items;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/WishlistItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/WishlistItem.java" />
              <option name="originalContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;wishlistItems\&quot;&quot;)&#10;public class WishlistItem {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;addedAt&quot;)&#10;    private Timestamp addedAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;bookId&quot;, nullable = false)&#10;    private Book book;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;wishlistId&quot;, nullable = false)&#10;    private Wishlist wishlist;&#10;}" />
              <option name="updatedContent" value="package model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.sql.Timestamp;&#10;&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;\&quot;wishlistItems\&quot;&quot;)&#10;public class WishlistItem {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(name = &quot;\&quot;id\&quot;&quot;)&#10;    private Long id;&#10;&#10;    @Column(name = &quot;\&quot;addedAt\&quot;&quot;)&#10;    private Timestamp addedAt;&#10;&#10;    // Relationships&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;bookId\&quot;&quot;, nullable = false)&#10;    private Book book;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;\&quot;wishlistId\&quot;&quot;, nullable = false)&#10;    private Wishlist wishlist;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/service/CategoryBookService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/service/CategoryBookService.java" />
              <option name="originalContent" value="package service;&#10;&#10;import dao.CategoryBookDao;&#10;import model.Book;&#10;import model.Category;&#10;&#10;import java.util.List;&#10;&#10;public class CategoryBookService {&#10;    private static final int BOOKS_PER_PAGE = 40;&#10;    private static final int MAX_PAGE_DISPLAY = 5;&#10;&#10;    /**&#10;     * Lấy sách theo category ID với phân trang&#10;     */&#10;    public static List&lt;Book&gt; getBooksByCategoryId(int categoryId, int page) {&#10;        return CategoryBookDao.getBooksByCategoryId(categoryId, page);&#10;    }&#10;&#10;    /**&#10;     * Lấy tất cả sách với phân trang&#10;     */&#10;    public static List&lt;Book&gt; getAllBook(int page) {&#10;        return CategoryBookDao.getAllBook(page);&#10;    }&#10;&#10;    /**&#10;     * Tính tổng số trang cho tất cả sách&#10;     */&#10;    public static int getTotalPages() {&#10;        long totalBooks = CategoryBookDao.getTotalBooks();&#10;        int totalPages = (int) Math.ceil((double) totalBooks / BOOKS_PER_PAGE);&#10;        return Math.max(1, totalPages); // Đảm bảo luôn có ít nhất 1 trang&#10;    }&#10;&#10;    /**&#10;     * Tính tổng số trang theo category&#10;     */&#10;    public static int getTotalPagesByCategory(int categoryId) {&#10;        long totalBooks = CategoryBookDao.getTotalBooksByCategory(categoryId);&#10;        int totalPages = (int) Math.ceil((double) totalBooks / BOOKS_PER_PAGE);&#10;        return Math.max(1, totalPages); // Đảm bảo luôn có ít nhất 1 trang&#10;    }&#10;&#10;    /**&#10;     * Tính toán các trang hiển thị trong pagination&#10;     */&#10;    public static int[] calculateVisiblePages(int currentPage, int totalPages) {&#10;        // Xử lý trường hợp không có trang nào hoặc totalPages không hợp lệ&#10;        if (totalPages &lt;= 0) {&#10;            return new int[]{1}; // Trả về array với page 1 thay vì empty array&#10;        }&#10;&#10;        if (totalPages &lt;= MAX_PAGE_DISPLAY) {&#10;            int[] pages = new int[totalPages];&#10;            for (int i = 0; i &lt; totalPages; i++) {&#10;                pages[i] = i + 1;&#10;            }&#10;            return pages;&#10;        }&#10;&#10;        if (currentPage &lt;= 3) {&#10;            // Đầu: 1 2 3 4 5 ... totalPages&#10;            return new int[]{1, 2, 3, 4, 5};&#10;        } else if (currentPage &gt;= totalPages - 2) {&#10;            // Cuối: 1 ... totalPages-4 totalPages-3 totalPages-2 totalPages-1 totalPages&#10;            return new int[]{totalPages - 4, totalPages - 3, totalPages - 2, totalPages - 1, totalPages};&#10;        } else {&#10;            // Giữa: 1 ... currentPage-1 currentPage currentPage+1 ... totalPages&#10;            return new int[]{currentPage - 2, currentPage - 1, currentPage, currentPage + 1, currentPage + 2};&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lọc sách theo tiêu đề, tác giả, và categories&#10;     */&#10;    public static List&lt;Book&gt; filterBook(String title, String author, &#10;                                        List&lt;Long&gt; includeCategories,&#10;                                        List&lt;Long&gt; excludeCategories, &#10;                                        int page) {&#10;        return CategoryBookDao.filterBooks(title, author, includeCategories, excludeCategories, page);&#10;    }&#10;&#10;    /**&#10;     * Tính tổng số trang cho kết quả filter&#10;     */&#10;    public static int getTotalPage(String title, String author, &#10;                                   List&lt;Long&gt; includeCategories,&#10;                                   List&lt;Long&gt; excludeCategories) {&#10;        long totalBooks = CategoryBookDao.countBooks(title, author, includeCategories, excludeCategories);&#10;        int totalPages = (int) Math.ceil((double) totalBooks / BOOKS_PER_PAGE);&#10;        return Math.max(1, totalPages); // Đảm bảo luôn có ít nhất 1 trang&#10;    }&#10;&#10;    /**&#10;     * Lấy tất cả categories&#10;     */&#10;    public static List&lt;Category&gt; getAllCategory() {&#10;        return CategoryBookDao.getAllCategories();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package service;&#10;&#10;import dao.CategoryBookDao;&#10;import model.Book;&#10;import model.Category;&#10;&#10;import java.util.List;&#10;&#10;public class CategoryBookService {&#10;    private static final int BOOKS_PER_PAGE = 40;&#10;    private static final int MAX_PAGE_DISPLAY = 5;&#10;&#10;    /**&#10;     * Lấy sách theo category ID với phân trang&#10;     */&#10;    public static List&lt;Book&gt; getBooksByCategoryId(int categoryId, int page) {&#10;        return CategoryBookDao.getBooksByCategoryId(categoryId, page);&#10;    }&#10;&#10;    /**&#10;     * Lấy tất cả sách với phân trang&#10;     */&#10;    public static List&lt;Book&gt; getAllBook(int page) {&#10;        return CategoryBookDao.getAllBook(page);&#10;    }&#10;&#10;    /**&#10;     * Tính tổng số trang cho tất cả sách&#10;     */&#10;    public static int getTotalPages() {&#10;        long totalBooks = CategoryBookDao.getTotalBooks();&#10;        int totalPages = (int) Math.ceil((double) totalBooks / BOOKS_PER_PAGE);&#10;        return Math.max(1, totalPages); // Đảm bảo luôn có ít nhất 1 trang&#10;    }&#10;&#10;    /**&#10;     * Tính tổng số trang theo category&#10;     */&#10;    public static int getTotalPagesByCategory(int categoryId) {&#10;        long totalBooks = CategoryBookDao.getTotalBooksByCategory(categoryId);&#10;        int totalPages = (int) Math.ceil((double) totalBooks / BOOKS_PER_PAGE);&#10;        return Math.max(1, totalPages); // Đảm bảo luôn có ít nhất 1 trang&#10;    }&#10;&#10;    /**&#10;     * Tính toán các trang hiển thị trong pagination&#10;     */&#10;    public static int[] calculateVisiblePages(int currentPage, int totalPages) {&#10;        // Xử lý trường hợp không có trang nào hoặc totalPages không hợp lệ&#10;        if (totalPages &lt;= 0) {&#10;            return new int[]{1}; // Trả về array với page 1 thay vì empty array&#10;        }&#10;&#10;        if (totalPages &lt;= MAX_PAGE_DISPLAY) {&#10;            int[] pages = new int[totalPages];&#10;            for (int i = 0; i &lt; totalPages; i++) {&#10;                pages[i] = i + 1;&#10;            }&#10;            return pages;&#10;        }&#10;&#10;        if (currentPage &lt;= 3) {&#10;            // Đầu: 1 2 3 4 5 ... totalPages&#10;            return new int[]{1, 2, 3, 4, 5};&#10;        } else if (currentPage &gt;= totalPages - 2) {&#10;            // Cuối: 1 ... totalPages-4 totalPages-3 totalPages-2 totalPages-1 totalPages&#10;            return new int[]{totalPages - 4, totalPages - 3, totalPages - 2, totalPages - 1, totalPages};&#10;        } else {&#10;            // Giữa: 1 ... currentPage-1 currentPage currentPage+1 ... totalPages&#10;            return new int[]{currentPage - 2, currentPage - 1, currentPage, currentPage + 1, currentPage + 2};&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Lọc sách theo tiêu đề, tác giả, và categories&#10;     */&#10;    public static List&lt;Book&gt; filterBook(String title, String author, &#10;                                        List&lt;Long&gt; includeCategories,&#10;                                        List&lt;Long&gt; excludeCategories, &#10;                                        int page) {&#10;        return CategoryBookDao.filterBooks(title, author, includeCategories, excludeCategories, page);&#10;    }&#10;&#10;    /**&#10;     * Tính tổng số trang cho kết quả filter&#10;     */&#10;    public static int getTotalPage(String title, String author, &#10;                                   List&lt;Long&gt; includeCategories,&#10;                                   List&lt;Long&gt; excludeCategories) {&#10;        long totalBooks = CategoryBookDao.countBooks(title, author, includeCategories, excludeCategories);&#10;        int totalPages = (int) Math.ceil((double) totalBooks / BOOKS_PER_PAGE);&#10;        return Math.max(1, totalPages); // Đảm bảo luôn có ít nhất 1 trang&#10;    }&#10;&#10;    /**&#10;     * Lấy tất cả categories&#10;     */&#10;    public static List&lt;Category&gt; getAllCategory() {&#10;        return CategoryBookDao.getAllCategories();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/WEB-INF/views/categoryBook.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/WEB-INF/views/categoryBook.jsp" />
              <option name="originalContent" value="&lt;%--&#10;  Created by IntelliJ IDEA.&#10;  User: kadfw&#10;  Date: 9/14/2025&#10;  Time: 11:36 PM&#10;  To change this template use File | Settings | File Templates.&#10;--%&gt;&#10;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/assets/styles/categoryBook.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div class=&quot;container&quot;&gt;&#10;    &lt;div class=&quot;search-section&quot;&gt;&#10;        &lt;div class=&quot;search-card&quot;&gt;&#10;            &lt;div class=&quot;card-header&quot;&gt;&#10;                &lt;h2 class=&quot;card-title&quot;&gt;Browse Books by Category&lt;/h2&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card-content&quot;&gt;&#10;                &lt;!-- Thanh tìm kiếm - cấu trúc hiện đại --&gt;&#10;                &lt;form action=&quot;${pageContext.request.contextPath}/categories&quot; method=&quot;get&quot; class=&quot;search-form&quot;&gt;&#10;                    &lt;div class=&quot;form-group&quot;&gt;&#10;                        &lt;input type=&quot;text&quot; name=&quot;search&quot; placeholder=&quot;Search by title or author&quot; value=&quot;${search}&quot; class=&quot;input&quot;&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;form-group button-group&quot;&gt;&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;toggleCategoryTable()&quot;&gt;Select Categories&lt;/button&gt;&#10;                        &lt;input type=&quot;submit&quot; value=&quot;Find&quot; class=&quot;btn btn-primary&quot; onclick=&quot;setSearchAction('title')&quot;&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;input type=&quot;hidden&quot; name=&quot;includeCategories&quot; id=&quot;includeCategories&quot; value=&quot;${includeCategories}&quot;&gt;&#10;                    &lt;input type=&quot;hidden&quot; name=&quot;excludeCategories&quot; id=&quot;excludeCategories&quot; value=&quot;${excludeCategories}&quot;&gt;&#10;                    &lt;input type=&quot;hidden&quot; name=&quot;action&quot; id=&quot;searchAction&quot; value=&quot;&quot;&gt;&#10;                &lt;/form&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Bảng category - chỉ hiển thị khi cần --&gt;&#10;        &lt;div id=&quot;categoryTable&quot; class=&quot;category-table&quot;&gt;&#10;            &lt;div style=&quot;margin-bottom: 10px;&quot;&gt;&#10;                &lt;strong&gt;Select Categories:&lt;/strong&gt;&#10;                &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;submitFilterForm()&quot;&gt;Apply Filter&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; onclick=&quot;toggleCategoryTable()&quot;&gt;Close&lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;c:forEach var=&quot;category&quot; items=&quot;${categories}&quot;&gt;&#10;                &lt;div class=&quot;category-item&quot; data-id=&quot;${category.id}&quot; onclick=&quot;toggleCategory(this, ${category.id})&quot;&gt;&#10;                    ${category.name}&#10;                &lt;/div&gt;&#10;            &lt;/c:forEach&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;book-list&quot;&gt;&#10;                &lt;c:choose&gt;&#10;                    &lt;c:when test=&quot;${empty requestScope.books}&quot;&gt;&#10;                        &lt;div class=&quot;no-results&quot;&gt;&#10;                            &lt;h3&gt;No books found&lt;/h3&gt;&#10;                            &lt;p&gt;Try different search criteria or browse all categories&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/c:when&gt;&#10;                    &lt;c:otherwise&gt;&#10;                        &lt;c:forEach items=&quot;${requestScope.books}&quot; var=&quot;book&quot;&gt;&#10;                            &lt;div class=&quot;book-card&quot;&gt;&#10;                                &lt;a href=&quot;${pageContext.request.contextPath}/book-detail?id=${book.id}&quot;&#10;                                    class=&quot;book-link&quot;&gt;&#10;                                    &lt;div class=&quot;book-image&quot;&gt;&#10;                                        &lt;img src=&quot;${book.thumbnailUrl}&quot; alt=&quot;${book.title}&quot;&#10;                                            class=&quot;book-thumbnail&quot;&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;book-info&quot;&gt;&#10;                                        &lt;h3 class=&quot;book-title&quot;&gt;${book.title}&lt;/h3&gt;&#10;                                        &lt;div class=&quot;book-price-row&quot;&gt;&#10;                                            &lt;span class=&quot;book-price-badge&quot;&gt;&#10;                                                &lt;fmt:formatNumber value=&quot;${book.getPrice()}&quot; type=&quot;number&quot; /&gt;&#10;                                                VND&#10;                                            &lt;/span&gt;&#10;                                            &lt;c:if test=&quot;${book.discountRate &gt; 0}&quot;&gt;&#10;                                                &lt;span class=&quot;discount&quot;&gt;-${book.discountRate}%&lt;/span&gt;&#10;                                            &lt;/c:if&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;p class=&quot;book-author&quot;&gt;Author: ${book.author}&lt;/p&gt;&#10;                                        &lt;p class=&quot;book-publisher&quot;&gt;Publisher: ${book.publisher}&lt;/p&gt;&#10;&#10;&lt;%--                                        &lt;div class=&quot;book-rating&quot;&gt;--%&gt;&#10;&lt;%--                                            &lt;jsp:include page=&quot;ratingStar.jsp&quot;&gt;--%&gt;&#10;&lt;%--                                                &lt;jsp:param name=&quot;fullStars&quot; value=&quot;${book.fullStars}&quot; /&gt;--%&gt;&#10;&lt;%--                                                &lt;jsp:param name=&quot;partialFraction&quot; value=&quot;${book.partialFraction}&quot; /&gt;--%&gt;&#10;&lt;%--                                                &lt;jsp:param name=&quot;emptyStars&quot; value=&quot;${book.emptyStars}&quot; /&gt;--%&gt;&#10;&lt;%--                                                &lt;jsp:param name=&quot;size&quot; value=&quot;16&quot; /&gt;--%&gt;&#10;&lt;%--                                            &lt;/jsp:include&gt;--%&gt;&#10;&lt;%--                                            &lt;span class=&quot;rating-value&quot;&gt;${book.rating} / 5&lt;/span&gt;--%&gt;&#10;&lt;%--                                        &lt;/div&gt;--%&gt;&#10;&#10;                                    &lt;/div&gt;&#10;                                &lt;/a&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/c:forEach&gt;&#10;                    &lt;/c:otherwise&gt;&#10;                &lt;/c:choose&gt;&#10;            &lt;/div&gt;&#10;&#10;    &lt;!-- Pagination --&gt;&#10;    &lt;div class=&quot;pagination&quot;&gt;&#10;        &lt;c:choose&gt;&#10;            &lt;c:when test=&quot;${currentPage &gt; 1}&quot;&gt;&#10;                &lt;a href=&quot;?page=${currentPage - 1}&amp;search=${search}&amp;includeCategories=${includeCategories}&amp;excludeCategories=${excludeCategories}${not empty categoryId ? '&amp;category='.concat(categoryId) : ''}&quot;&gt;&amp;lt;&lt;/a&gt;&#10;            &lt;/c:when&gt;&#10;            &lt;c:otherwise&gt;&#10;                &lt;span class=&quot;disabled&quot;&gt;&amp;lt;&lt;/span&gt;&#10;            &lt;/c:otherwise&gt;&#10;        &lt;/c:choose&gt;&#10;&#10;        &lt;c:if test=&quot;${showFirstEllipsis}&quot;&gt;&#10;            &lt;a href=&quot;?page=1&amp;search=${search}&amp;includeCategories=${includeCategories}&amp;excludeCategories=${excludeCategories}${not empty categoryId ? '&amp;category='.concat(categoryId) : ''}&quot;&gt;1&lt;/a&gt;&#10;            &lt;span class=&quot;ellipsis&quot;&gt;...&lt;/span&gt;&#10;        &lt;/c:if&gt;&#10;&#10;        &lt;c:forEach items=&quot;${visiblePages}&quot; var=&quot;pageNum&quot;&gt;&#10;            &lt;c:choose&gt;&#10;                &lt;c:when test=&quot;${pageNum == currentPage}&quot;&gt;&#10;                    &lt;span class=&quot;active&quot;&gt;${pageNum}&lt;/span&gt;&#10;                &lt;/c:when&gt;&#10;                &lt;c:otherwise&gt;&#10;                    &lt;a href=&quot;?page=${pageNum}&amp;search=${search}&amp;includeCategories=${includeCategories}&amp;excludeCategories=${excludeCategories}${not empty categoryId ? '&amp;category='.concat(categoryId) : ''}&quot;&gt;${pageNum}&lt;/a&gt;&#10;                &lt;/c:otherwise&gt;&#10;            &lt;/c:choose&gt;&#10;        &lt;/c:forEach&gt;&#10;&#10;        &lt;c:if test=&quot;${showLastEllipsis}&quot;&gt;&#10;            &lt;span class=&quot;ellipsis&quot;&gt;...&lt;/span&gt;&#10;            &lt;a href=&quot;?page=${totalPages}&amp;search=${search}&amp;includeCategories=${includeCategories}&amp;excludeCategories=${excludeCategories}${not empty categoryId ? '&amp;category='.concat(categoryId) : ''}&quot;&gt;${totalPages}&lt;/a&gt;&#10;        &lt;/c:if&gt;&#10;&#10;        &lt;c:choose&gt;&#10;            &lt;c:when test=&quot;${currentPage &lt; totalPages}&quot;&gt;&#10;                &lt;a href=&quot;?page=${currentPage + 1}&amp;search=${search}&amp;includeCategories=${includeCategories}&amp;excludeCategories=${excludeCategories}${not empty categoryId ? '&amp;category='.concat(categoryId) : ''}&quot;&gt;&amp;gt;&lt;/a&gt;&#10;            &lt;/c:when&gt;&#10;            &lt;c:otherwise&gt;&#10;                &lt;span class=&quot;disabled&quot;&gt;&amp;gt;&lt;/span&gt;&#10;            &lt;/c:otherwise&gt;&#10;        &lt;/c:choose&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Load JavaScript file and initialize variables --&gt;&#10;&lt;script&gt;&#10;    // Pass JSP variables to JavaScript&#10;    var includeCategories_jsp = '${includeCategories}';&#10;    var excludeCategories_jsp = '${excludeCategories}';&#10;&lt;/script&gt;&#10;&lt;script src=&quot;${pageContext.request.contextPath}/assets/js/categoryBook.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;%--&#10;  Created by IntelliJ IDEA.&#10;  User: kadfw&#10;  Date: 9/14/2025&#10;  Time: 11:36 PM&#10;  To change this template use File | Settings | File Templates.&#10;--%&gt;&#10;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&#10;&lt;%@ taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;${pageContext.request.contextPath}/assets/styles/categoryBook.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div class=&quot;container&quot;&gt;&#10;    &lt;div class=&quot;search-section&quot;&gt;&#10;        &lt;div class=&quot;search-card&quot;&gt;&#10;            &lt;div class=&quot;card-header&quot;&gt;&#10;                &lt;h2 class=&quot;card-title&quot;&gt;Browse Books by Category&lt;/h2&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;card-content&quot;&gt;&#10;                &lt;!-- Thanh tìm kiếm - cấu trúc hiện đại --&gt;&#10;                &lt;form action=&quot;${pageContext.request.contextPath}/categories&quot; method=&quot;get&quot; class=&quot;search-form&quot;&gt;&#10;                    &lt;div class=&quot;form-group&quot;&gt;&#10;                        &lt;input type=&quot;text&quot; name=&quot;search&quot; placeholder=&quot;Search by title or author&quot; value=&quot;${search}&quot; class=&quot;input&quot;&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;form-group button-group&quot;&gt;&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;toggleCategoryTable()&quot;&gt;Select Categories&lt;/button&gt;&#10;                        &lt;input type=&quot;submit&quot; value=&quot;Find&quot; class=&quot;btn btn-primary&quot; onclick=&quot;setSearchAction('title')&quot;&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;input type=&quot;hidden&quot; name=&quot;includeCategories&quot; id=&quot;includeCategories&quot; value=&quot;${includeCategories}&quot;&gt;&#10;                    &lt;input type=&quot;hidden&quot; name=&quot;excludeCategories&quot; id=&quot;excludeCategories&quot; value=&quot;${excludeCategories}&quot;&gt;&#10;                    &lt;input type=&quot;hidden&quot; name=&quot;action&quot; id=&quot;searchAction&quot; value=&quot;&quot;&gt;&#10;                &lt;/form&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Bảng category - chỉ hiển thị khi cần --&gt;&#10;        &lt;div id=&quot;categoryTable&quot; class=&quot;category-table&quot;&gt;&#10;            &lt;div style=&quot;margin-bottom: 10px;&quot;&gt;&#10;                &lt;strong&gt;Select Categories:&lt;/strong&gt;&#10;                &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;submitFilterForm()&quot;&gt;Apply Filter&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; onclick=&quot;toggleCategoryTable()&quot;&gt;Close&lt;/button&gt;&#10;            &lt;/div&gt;&#10;            &lt;c:forEach var=&quot;category&quot; items=&quot;${categories}&quot;&gt;&#10;                &lt;div class=&quot;category-item&quot; data-id=&quot;${category.id}&quot; onclick=&quot;toggleCategory(this, ${category.id})&quot;&gt;&#10;                    ${category.name}&#10;                &lt;/div&gt;&#10;            &lt;/c:forEach&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;book-list&quot;&gt;&#10;                &lt;c:choose&gt;&#10;                    &lt;c:when test=&quot;${empty requestScope.books}&quot;&gt;&#10;                        &lt;div class=&quot;no-results&quot;&gt;&#10;                            &lt;h3&gt;No books found&lt;/h3&gt;&#10;                            &lt;p&gt;Try different search criteria or browse all categories&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/c:when&gt;&#10;                    &lt;c:otherwise&gt;&#10;                        &lt;c:forEach items=&quot;${requestScope.books}&quot; var=&quot;book&quot;&gt;&#10;                            &lt;div class=&quot;book-card&quot;&gt;&#10;                                &lt;a href=&quot;${pageContext.request.contextPath}/book-detail?id=${book.id}&quot;&#10;                                    class=&quot;book-link&quot;&gt;&#10;                                    &lt;div class=&quot;book-image&quot;&gt;&#10;                                        &lt;img src=&quot;${book.thumbnailUrl}&quot; alt=&quot;${book.title}&quot;&#10;                                            class=&quot;book-thumbnail&quot;&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;book-info&quot;&gt;&#10;                                        &lt;h3 class=&quot;book-title&quot;&gt;${book.title}&lt;/h3&gt;&#10;                                        &lt;div class=&quot;book-price-row&quot;&gt;&#10;                                            &lt;span class=&quot;book-price-badge&quot;&gt;&#10;                                                &lt;fmt:formatNumber value=&quot;${book.getPrice()}&quot; type=&quot;number&quot; /&gt;&#10;                                                VND&#10;                                            &lt;/span&gt;&#10;                                            &lt;c:if test=&quot;${book.discountRate &gt; 0}&quot;&gt;&#10;                                                &lt;span class=&quot;discount&quot;&gt;-${book.discountRate}%&lt;/span&gt;&#10;                                            &lt;/c:if&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;p class=&quot;book-author&quot;&gt;Author: ${book.author}&lt;/p&gt;&#10;                                        &lt;p class=&quot;book-publisher&quot;&gt;Publisher: ${book.publisher}&lt;/p&gt;&#10;&#10;&lt;%--                                        &lt;div class=&quot;book-rating&quot;&gt;--%&gt;&#10;&lt;%--                                            &lt;jsp:include page=&quot;ratingStar.jsp&quot;&gt;--%&gt;&#10;&lt;%--                                                &lt;jsp:param name=&quot;fullStars&quot; value=&quot;${book.fullStars}&quot; /&gt;--%&gt;&#10;&lt;%--                                                &lt;jsp:param name=&quot;partialFraction&quot; value=&quot;${book.partialFraction}&quot; /&gt;--%&gt;&#10;&lt;%--                                                &lt;jsp:param name=&quot;emptyStars&quot; value=&quot;${book.emptyStars}&quot; /&gt;--%&gt;&#10;&lt;%--                                                &lt;jsp:param name=&quot;size&quot; value=&quot;16&quot; /&gt;--%&gt;&#10;&lt;%--                                            &lt;/jsp:include&gt;--%&gt;&#10;&lt;%--                                            &lt;span class=&quot;rating-value&quot;&gt;${book.rating} / 5&lt;/span&gt;--%&gt;&#10;&lt;%--                                        &lt;/div&gt;--%&gt;&#10;&#10;                                    &lt;/div&gt;&#10;                                &lt;/a&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/c:forEach&gt;&#10;                    &lt;/c:otherwise&gt;&#10;                &lt;/c:choose&gt;&#10;            &lt;/div&gt;&#10;&#10;    &lt;!-- Pagination --&gt;&#10;    &lt;div class=&quot;pagination&quot;&gt;&#10;        &lt;c:choose&gt;&#10;            &lt;c:when test=&quot;${currentPage &gt; 1}&quot;&gt;&#10;                &lt;a href=&quot;?page=${currentPage - 1}&amp;search=${search}&amp;includeCategories=${includeCategories}&amp;excludeCategories=${excludeCategories}${not empty categoryId ? '&amp;category='.concat(categoryId) : ''}&quot;&gt;&amp;lt;&lt;/a&gt;&#10;            &lt;/c:when&gt;&#10;            &lt;c:otherwise&gt;&#10;                &lt;span class=&quot;disabled&quot;&gt;&amp;lt;&lt;/span&gt;&#10;            &lt;/c:otherwise&gt;&#10;        &lt;/c:choose&gt;&#10;&#10;        &lt;c:if test=&quot;${showFirstEllipsis}&quot;&gt;&#10;            &lt;a href=&quot;?page=1&amp;search=${search}&amp;includeCategories=${includeCategories}&amp;excludeCategories=${excludeCategories}${not empty categoryId ? '&amp;category='.concat(categoryId) : ''}&quot;&gt;1&lt;/a&gt;&#10;            &lt;span class=&quot;ellipsis&quot;&gt;...&lt;/span&gt;&#10;        &lt;/c:if&gt;&#10;&#10;        &lt;c:forEach items=&quot;${visiblePages}&quot; var=&quot;pageNum&quot;&gt;&#10;            &lt;c:choose&gt;&#10;                &lt;c:when test=&quot;${pageNum == currentPage}&quot;&gt;&#10;                    &lt;span class=&quot;active&quot;&gt;${pageNum}&lt;/span&gt;&#10;                &lt;/c:when&gt;&#10;                &lt;c:otherwise&gt;&#10;                    &lt;a href=&quot;?page=${pageNum}&amp;search=${search}&amp;includeCategories=${includeCategories}&amp;excludeCategories=${excludeCategories}${not empty categoryId ? '&amp;category='.concat(categoryId) : ''}&quot;&gt;${pageNum}&lt;/a&gt;&#10;                &lt;/c:otherwise&gt;&#10;            &lt;/c:choose&gt;&#10;        &lt;/c:forEach&gt;&#10;&#10;        &lt;c:if test=&quot;${showLastEllipsis}&quot;&gt;&#10;            &lt;span class=&quot;ellipsis&quot;&gt;...&lt;/span&gt;&#10;            &lt;a href=&quot;?page=${totalPages}&amp;search=${search}&amp;includeCategories=${includeCategories}&amp;excludeCategories=${excludeCategories}${not empty categoryId ? '&amp;category='.concat(categoryId) : ''}&quot;&gt;${totalPages}&lt;/a&gt;&#10;        &lt;/c:if&gt;&#10;&#10;        &lt;c:choose&gt;&#10;            &lt;c:when test=&quot;${currentPage &lt; totalPages}&quot;&gt;&#10;                &lt;a href=&quot;?page=${currentPage + 1}&amp;search=${search}&amp;includeCategories=${includeCategories}&amp;excludeCategories=${excludeCategories}${not empty categoryId ? '&amp;category='.concat(categoryId) : ''}&quot;&gt;&amp;gt;&lt;/a&gt;&#10;            &lt;/c:when&gt;&#10;            &lt;c:otherwise&gt;&#10;                &lt;span class=&quot;disabled&quot;&gt;&amp;gt;&lt;/span&gt;&#10;            &lt;/c:otherwise&gt;&#10;        &lt;/c:choose&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;!-- Load JavaScript file and initialize variables --&gt;&#10;&lt;script&gt;&#10;    // Pass JSP variables to JavaScript&#10;    var includeCategories_jsp = '${includeCategories}';&#10;    var excludeCategories_jsp = '${excludeCategories}';&#10;&lt;/script&gt;&#10;&lt;script src=&quot;${pageContext.request.contextPath}/assets/js/categoryBook.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>