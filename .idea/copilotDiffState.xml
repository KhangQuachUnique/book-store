<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/dao/BookDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/dao/BookDao.java" />
              <option name="originalContent" value="package dao;&#10;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.sql.SQLException;&#10;import java.sql.Types;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.logging.Logger;&#10;&#10;import model.Book;&#10;import model.Category;&#10;import util.DBConnection;&#10;&#10;/**&#10; * Data Access Object for managing books in the database.&#10; */&#10;public class BookDao {&#10;    @SuppressWarnings(&quot;unused&quot;)&#10;    private static final Logger log = Logger.getLogger(BookDao.class.getName());&#10;    private static final int PAGE_SIZE = 20; // Limit to 20 books per page&#10;&#10;    /**&#10;     * Retrieves all books with pagination.&#10;     *&#10;     * @param page The page number (1-based).&#10;     * @return List of books for the specified page.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static List&lt;Book&gt; getAllBooks(int page) throws SQLException {&#10;        String sql = &quot;SELECT * FROM books ORDER BY id LIMIT ? OFFSET ?&quot;;&#10;        return getBooksByQuery(sql, page, null);&#10;    }&#10;&#10;    /**&#10;     * Retrieves a book by its ID.&#10;     *&#10;     * @param id The book ID.&#10;     * @return The Book object or null if not found.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static Book getBookById(long id) throws SQLException {&#10;        String sql = &quot;SELECT * FROM books WHERE id = ?&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            ps.setLong(1, id);&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return mapResultSetToBook(rs);&#10;                }&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Adds a new book to the database.&#10;     *&#10;     * @param book The Book object to add.&#10;     * @return True if successful, false otherwise.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static boolean addBook(Book book) throws SQLException {&#10;        String sql = &quot;INSERT INTO books (title, author, publisher, category_id, stock, original_price, discount_rate, &quot;&#10;                +&#10;                &quot;thumbnail_url, description, publish_year, pages, rating_average, price, created_at) &quot; +&#10;                &quot;VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            setBookParameters(ps, book);&#10;            return ps.executeUpdate() &gt; 0;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Updates an existing book.&#10;     *&#10;     * @param book The Book object with updated data.&#10;     * @return True if successful, false otherwise.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static boolean updateBook(Book book) throws SQLException {&#10;        String sql = &quot;UPDATE books SET title = ?, author = ?, publisher = ?, category_id = ?, stock = ?, &quot; +&#10;                &quot;original_price = ?, discount_rate = ?, thumbnail_url = ?, description = ?, publish_year = ?, &quot; +&#10;                &quot;pages = ?, rating_average = ?, price = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            setBookParameters(ps, book);&#10;            ps.setLong(14, book.getId());&#10;            return ps.executeUpdate() &gt; 0;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Deletes a book by its ID.&#10;     *&#10;     * @param id The book ID.&#10;     * @return True if successful, false otherwise.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static boolean deleteBook(long id) throws SQLException {&#10;        String sql = &quot;DELETE FROM books WHERE id = ?&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            ps.setLong(1, id);&#10;            return ps.executeUpdate() &gt; 0;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Filters books by title, publish year, and categories (include/exclude).&#10;     *&#10;     * @param title             The title to search (partial match).&#10;     * @param publishYear       The publication year.&#10;     * @param includeCategories Categories to include (AND logic).&#10;     * @param excludeCategories Categories to exclude.&#10;     * @param page              The page number.&#10;     * @return List of matching books.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static List&lt;Book&gt; filterBooks(String title, Integer publishYear, List&lt;Long&gt; includeCategories,&#10;            List&lt;Long&gt; excludeCategories, int page) throws SQLException {&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT * FROM books WHERE 1=1&quot;);&#10;        List&lt;Object&gt; params = new ArrayList&lt;&gt;();&#10;&#10;        if (title != null &amp;&amp; !title.isEmpty()) {&#10;            sql.append(&quot; AND title ILIKE ?&quot;);&#10;            params.add(&quot;%&quot; + title + &quot;%&quot;);&#10;        }&#10;        if (publishYear != null) {&#10;            sql.append(&quot; AND publish_year = ?&quot;);&#10;            params.add(publishYear);&#10;        }&#10;        if (includeCategories != null &amp;&amp; !includeCategories.isEmpty()) {&#10;            sql.append(&quot; AND category_id IN (&quot;).append(&quot;?,&quot;.repeat(includeCategories.size()))&#10;                    .deleteCharAt(sql.length() - 1).append(&quot;)&quot;);&#10;            params.addAll(includeCategories);&#10;        }&#10;        if (excludeCategories != null &amp;&amp; !excludeCategories.isEmpty()) {&#10;            sql.append(&quot; AND category_id NOT IN (&quot;).append(&quot;?,&quot;.repeat(excludeCategories.size()))&#10;                    .deleteCharAt(sql.length() - 1).append(&quot;)&quot;);&#10;            params.addAll(excludeCategories);&#10;        }&#10;        sql.append(&quot; ORDER BY id LIMIT ? OFFSET ?&quot;);&#10;        params.add(PAGE_SIZE);&#10;        params.add((page - 1) * PAGE_SIZE);&#10;&#10;        return getBooksByQuery(sql.toString(), page, params.toArray());&#10;    }&#10;&#10;    /**&#10;     * Counts total books for pagination or filtering.&#10;     *&#10;     * @param title             The title to search.&#10;     * @param publishYear       The publication year.&#10;     * @param includeCategories Categories to include.&#10;     * @param excludeCategories Categories to exclude.&#10;     * @return Total number of matching books.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static long countBooks(String title, Integer publishYear, List&lt;Long&gt; includeCategories,&#10;            List&lt;Long&gt; excludeCategories) throws SQLException {&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT COUNT(*) FROM books WHERE 1=1&quot;);&#10;        List&lt;Object&gt; params = new ArrayList&lt;&gt;();&#10;&#10;        if (title != null &amp;&amp; !title.isEmpty()) {&#10;            sql.append(&quot; AND title ILIKE ?&quot;);&#10;            params.add(&quot;%&quot; + title + &quot;%&quot;);&#10;        }&#10;        if (publishYear != null) {&#10;            sql.append(&quot; AND publish_year = ?&quot;);&#10;            params.add(publishYear);&#10;        }&#10;        if (includeCategories != null &amp;&amp; !includeCategories.isEmpty()) {&#10;            sql.append(&quot; AND category_id IN (&quot;).append(&quot;?,&quot;.repeat(includeCategories.size()))&#10;                    .deleteCharAt(sql.length() - 1).append(&quot;)&quot;);&#10;            params.addAll(includeCategories);&#10;        }&#10;        if (excludeCategories != null &amp;&amp; !excludeCategories.isEmpty()) {&#10;            sql.append(&quot; AND category_id NOT IN (&quot;).append(&quot;?,&quot;.repeat(excludeCategories.size()))&#10;                    .deleteCharAt(sql.length() - 1).append(&quot;)&quot;);&#10;            params.addAll(excludeCategories);&#10;        }&#10;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql.toString())) {&#10;            for (int i = 0; i &lt; params.size(); i++) {&#10;                ps.setObject(i + 1, params.get(i));&#10;            }&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return rs.getLong(1);&#10;                }&#10;            }&#10;        }&#10;        return 0;&#10;    }&#10;&#10;    /**&#10;     * Retrieves all categories for filtering.&#10;     *&#10;     * @return List of categories.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static List&lt;Category&gt; getAllCategories() throws SQLException {&#10;        List&lt;Category&gt; categories = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT * FROM categories ORDER BY name&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql);&#10;                ResultSet rs = ps.executeQuery()) {&#10;            while (rs.next()) {&#10;                Category category = new Category();&#10;                category.setId(rs.getLong(&quot;id&quot;));&#10;                category.setName(rs.getString(&quot;name&quot;));&#10;                category.setParentId(rs.getLong(&quot;parent_id&quot;));&#10;                category.setIsLeaf(rs.getBoolean(&quot;is_leaf&quot;));&#10;                categories.add(category);&#10;            }&#10;        }&#10;        return categories;&#10;    }&#10;&#10;    /**&#10;     * Logs CSV import data to import_logs table.&#10;     *&#10;     * @param tableName    The table name (e.g., &quot;books&quot;).&#10;     * @param importedData JSON representation of imported data.&#10;     * @return True if successful, false otherwise.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static boolean logImport(String tableName, String importedData) throws SQLException {&#10;        String sql = &quot;INSERT INTO import_logs (table_name, imported_data, imported_at) VALUES (?, ?, CURRENT_TIMESTAMP)&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            ps.setString(1, tableName);&#10;            ps.setString(2, importedData);&#10;            return ps.executeUpdate() &gt; 0;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Maps a ResultSet row to a Book object.&#10;     *&#10;     * @param rs The ResultSet.&#10;     * @return The mapped Book object.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    private static Book mapResultSetToBook(ResultSet rs) throws SQLException {&#10;        Book book = new Book();&#10;        book.setId(rs.getInt(&quot;id&quot;));&#10;        book.setTitle(rs.getString(&quot;title&quot;));&#10;        book.setAuthor(rs.getString(&quot;author&quot;));&#10;        book.setPublisher(rs.getString(&quot;publisher&quot;));&#10;        book.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;        book.setStock(rs.getInt(&quot;stock&quot;));&#10;        book.setOriginalPrice(rs.getDouble(&quot;original_price&quot;));&#10;        book.setDiscount_rate(rs.getInt(&quot;discount_rate&quot;));&#10;        book.setThumbnailUrl(rs.getString(&quot;thumbnail_url&quot;));&#10;        book.setDescription(rs.getString(&quot;description&quot;));&#10;        book.setPublishYear(rs.getInt(&quot;publish_year&quot;));&#10;        book.setPages(rs.getInt(&quot;pages&quot;));&#10;        book.setRating(rs.getDouble(&quot;rating_average&quot;));&#10;        book.setPrice(rs.getDouble(&quot;price&quot;));&#10;        book.setCreatedAt(rs.getTimestamp(&quot;created_at&quot;));&#10;        return book;&#10;    }&#10;&#10;    /**&#10;     * Sets PreparedStatement parameters for add/update book queries.&#10;     *&#10;     * @param ps   The PreparedStatement.&#10;     * @param book The Book object.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    private static void setBookParameters(PreparedStatement ps, Book book) throws SQLException {&#10;        ps.setString(1, book.getTitle());&#10;        ps.setString(2, book.getAuthor());&#10;        ps.setString(3, book.getPublisher());&#10;        ps.setInt(4, book.getCategoryId());&#10;        ps.setInt(5, book.getStock());&#10;        ps.setDouble(6, book.getOriginalPrice());&#10;        ps.setInt(7, book.getDiscount_rate());&#10;        ps.setString(8, book.getThumbnailUrl());&#10;        ps.setString(9, book.getDescription());&#10;        ps.setObject(10, book.getPublishYear(), Types.INTEGER);&#10;        ps.setObject(11, book.getPages(), Types.INTEGER);&#10;        ps.setDouble(12, book.getRating());&#10;        ps.setDouble(13, book.getPrice());&#10;    }&#10;&#10;    /**&#10;     * Executes a query to retrieve books with dynamic parameters.&#10;     *&#10;     * @param sql    The SQL query.&#10;     * @param page   The page number.&#10;     * @param params Query parameters.&#10;     * @return List of books.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    private static List&lt;Book&gt; getBooksByQuery(String sql, int page, Object[] params) throws SQLException {&#10;        List&lt;Book&gt; books = new ArrayList&lt;&gt;();&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            if (params != null) {&#10;                for (int i = 0; i &lt; params.length; i++) {&#10;                    ps.setObject(i + 1, params[i]);&#10;                }&#10;            } else {&#10;                ps.setInt(1, PAGE_SIZE);&#10;                ps.setInt(2, (page - 1) * PAGE_SIZE);&#10;            }&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                while (rs.next()) {&#10;                    books.add(mapResultSetToBook(rs));&#10;                }&#10;            }&#10;        }&#10;        return books;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package dao;&#10;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.sql.SQLException;&#10;import java.sql.Types;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.logging.Logger;&#10;&#10;import model.Book;&#10;import model.Category;&#10;import util.DBConnection;&#10;&#10;/**&#10; * Data Access Object for managing books in the database.&#10; */&#10;public class BookDao {&#10;    @SuppressWarnings(&quot;unused&quot;)&#10;    private static final Logger log = Logger.getLogger(BookDao.class.getName());&#10;    private static final int PAGE_SIZE = 20; // Limit to 20 books per page&#10;&#10;    /**&#10;     * Retrieves all books with pagination.&#10;     *&#10;     * @param page The page number (1-based).&#10;     * @return List of books for the specified page.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static List&lt;Book&gt; getAllBooks(int page) throws SQLException {&#10;        String sql = &quot;SELECT * FROM books ORDER BY id LIMIT ? OFFSET ?&quot;;&#10;        return getBooksByQuery(sql, page, null);&#10;    }&#10;&#10;    /**&#10;     * Retrieves a book by its ID.&#10;     *&#10;     * @param id The book ID.&#10;     * @return The Book object or null if not found.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static Book getBookById(long id) throws SQLException {&#10;        String sql = &quot;SELECT * FROM books WHERE id = ?&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            ps.setLong(1, id);&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return mapResultSetToBook(rs);&#10;                }&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Adds a new book to the database.&#10;     *&#10;     * @param book The Book object to add.&#10;     * @return True if successful, false otherwise.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static boolean addBook(Book book) throws SQLException {&#10;        String sql = &quot;INSERT INTO books (title, author, publisher, category_id, stock, original_price, discount_rate, &quot;&#10;                +&#10;                &quot;thumbnail_url, description, publish_year, pages, rating_average, price, created_at) &quot; +&#10;                &quot;VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            setBookParameters(ps, book);&#10;            return ps.executeUpdate() &gt; 0;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Updates an existing book.&#10;     *&#10;     * @param book The Book object with updated data.&#10;     * @return True if successful, false otherwise.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static boolean updateBook(Book book) throws SQLException {&#10;        String sql = &quot;UPDATE books SET title = ?, author = ?, publisher = ?, category_id = ?, stock = ?, &quot; +&#10;                &quot;original_price = ?, discount_rate = ?, thumbnail_url = ?, description = ?, publish_year = ?, &quot; +&#10;                &quot;pages = ?, rating_average = ?, price = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            setBookParameters(ps, book);&#10;            ps.setLong(14, book.getId());&#10;            return ps.executeUpdate() &gt; 0;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Deletes a book by its ID.&#10;     *&#10;     * @param id The book ID.&#10;     * @return True if successful, false otherwise.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static boolean deleteBook(long id) throws SQLException {&#10;        String sql = &quot;DELETE FROM books WHERE id = ?&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            ps.setLong(1, id);&#10;            return ps.executeUpdate() &gt; 0;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Filters books by title, publish year, and categories (include/exclude).&#10;     *&#10;     * @param title             The title to search (partial match).&#10;     * @param publishYear       The publication year.&#10;     * @param includeCategories Categories to include (AND logic).&#10;     * @param excludeCategories Categories to exclude.&#10;     * @param page              The page number.&#10;     * @return List of matching books.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static List&lt;Book&gt; filterBooks(String title, Integer publishYear, List&lt;Long&gt; includeCategories,&#10;            List&lt;Long&gt; excludeCategories, int page) throws SQLException {&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT * FROM books WHERE 1=1&quot;);&#10;        List&lt;Object&gt; params = new ArrayList&lt;&gt;();&#10;&#10;        if (title != null &amp;&amp; !title.isEmpty()) {&#10;            sql.append(&quot; AND title ILIKE ?&quot;);&#10;            params.add(&quot;%&quot; + title + &quot;%&quot;);&#10;        }&#10;        if (publishYear != null) {&#10;            sql.append(&quot; AND publish_year = ?&quot;);&#10;            params.add(publishYear);&#10;        }&#10;        if (includeCategories != null &amp;&amp; !includeCategories.isEmpty()) {&#10;            sql.append(&quot; AND category_id IN (&quot;).append(&quot;?,&quot;.repeat(includeCategories.size()))&#10;                    .deleteCharAt(sql.length() - 1).append(&quot;)&quot;);&#10;            params.addAll(includeCategories);&#10;        }&#10;        if (excludeCategories != null &amp;&amp; !excludeCategories.isEmpty()) {&#10;            sql.append(&quot; AND category_id NOT IN (&quot;).append(&quot;?,&quot;.repeat(excludeCategories.size()))&#10;                    .deleteCharAt(sql.length() - 1).append(&quot;)&quot;);&#10;            params.addAll(excludeCategories);&#10;        }&#10;        sql.append(&quot; ORDER BY id LIMIT ? OFFSET ?&quot;);&#10;        params.add(PAGE_SIZE);&#10;        params.add((page - 1) * PAGE_SIZE);&#10;&#10;        return getBooksByQuery(sql.toString(), page, params.toArray());&#10;    }&#10;&#10;    /**&#10;     * Counts total books for pagination or filtering.&#10;     *&#10;     * @param title             The title to search.&#10;     * @param publishYear       The publication year.&#10;     * @param includeCategories Categories to include.&#10;     * @param excludeCategories Categories to exclude.&#10;     * @return Total number of matching books.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static long countBooks(String title, Integer publishYear, List&lt;Long&gt; includeCategories,&#10;            List&lt;Long&gt; excludeCategories) throws SQLException {&#10;        StringBuilder sql = new StringBuilder(&quot;SELECT COUNT(*) FROM books WHERE 1=1&quot;);&#10;        List&lt;Object&gt; params = new ArrayList&lt;&gt;();&#10;&#10;        if (title != null &amp;&amp; !title.isEmpty()) {&#10;            sql.append(&quot; AND title ILIKE ?&quot;);&#10;            params.add(&quot;%&quot; + title + &quot;%&quot;);&#10;        }&#10;        if (publishYear != null) {&#10;            sql.append(&quot; AND publish_year = ?&quot;);&#10;            params.add(publishYear);&#10;        }&#10;        if (includeCategories != null &amp;&amp; !includeCategories.isEmpty()) {&#10;            sql.append(&quot; AND category_id IN (&quot;).append(&quot;?,&quot;.repeat(includeCategories.size()))&#10;                    .deleteCharAt(sql.length() - 1).append(&quot;)&quot;);&#10;            params.addAll(includeCategories);&#10;        }&#10;        if (excludeCategories != null &amp;&amp; !excludeCategories.isEmpty()) {&#10;            sql.append(&quot; AND category_id NOT IN (&quot;).append(&quot;?,&quot;.repeat(excludeCategories.size()))&#10;                    .deleteCharAt(sql.length() - 1).append(&quot;)&quot;);&#10;            params.addAll(excludeCategories);&#10;        }&#10;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql.toString())) {&#10;            for (int i = 0; i &lt; params.size(); i++) {&#10;                ps.setObject(i + 1, params.get(i));&#10;            }&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return rs.getLong(1);&#10;                }&#10;            }&#10;        }&#10;        return 0;&#10;    }&#10;&#10;    /**&#10;     * Retrieves all categories for filtering.&#10;     *&#10;     * @return List of categories.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static List&lt;Category&gt; getAllCategories() throws SQLException {&#10;        List&lt;Category&gt; categories = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT * FROM categories ORDER BY name&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql);&#10;                ResultSet rs = ps.executeQuery()) {&#10;            while (rs.next()) {&#10;                Category category = new Category();&#10;                category.setId(rs.getLong(&quot;id&quot;));&#10;                category.setName(rs.getString(&quot;name&quot;));&#10;                category.setParentId(rs.getLong(&quot;parent_id&quot;));&#10;                category.setIsLeaf(rs.getBoolean(&quot;is_leaf&quot;));&#10;                categories.add(category);&#10;            }&#10;        }&#10;        return categories;&#10;    }&#10;&#10;    /**&#10;     * Logs CSV import data to import_logs table.&#10;     *&#10;     * @param tableName    The table name (e.g., &quot;books&quot;).&#10;     * @param importedData JSON representation of imported data.&#10;     * @return True if successful, false otherwise.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    public static boolean logImport(String tableName, String importedData) throws SQLException {&#10;        String sql = &quot;INSERT INTO import_logs (table_name, imported_data, imported_at) VALUES (?, ?, CURRENT_TIMESTAMP)&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            ps.setString(1, tableName);&#10;            ps.setString(2, importedData);&#10;            return ps.executeUpdate() &gt; 0;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Maps a ResultSet row to a Book object.&#10;     *&#10;     * @param rs The ResultSet.&#10;     * @return The mapped Book object.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    private static Book mapResultSetToBook(ResultSet rs) throws SQLException {&#10;        Book book = new Book();&#10;        book.setId(rs.getInt(&quot;id&quot;));&#10;        book.setTitle(rs.getString(&quot;title&quot;));&#10;        book.setAuthor(rs.getString(&quot;author&quot;));&#10;        book.setPublisher(rs.getString(&quot;publisher&quot;));&#10;        book.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;        book.setStock(rs.getInt(&quot;stock&quot;));&#10;        book.setOriginalPrice(rs.getDouble(&quot;original_price&quot;));&#10;        book.setDiscount_rate(rs.getInt(&quot;discount_rate&quot;));&#10;        book.setThumbnailUrl(rs.getString(&quot;thumbnail_url&quot;));&#10;        book.setDescription(rs.getString(&quot;description&quot;));&#10;        book.setPublishYear(rs.getInt(&quot;publish_year&quot;));&#10;        book.setPages(rs.getInt(&quot;pages&quot;));&#10;        book.setRating(rs.getDouble(&quot;rating_average&quot;));&#10;        book.setPrice(rs.getDouble(&quot;price&quot;));&#10;        book.setCreatedAt(rs.getTimestamp(&quot;created_at&quot;));&#10;        return book;&#10;    }&#10;&#10;    /**&#10;     * Sets PreparedStatement parameters for add/update book queries.&#10;     *&#10;     * @param ps   The PreparedStatement.&#10;     * @param book The Book object.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    private static void setBookParameters(PreparedStatement ps, Book book) throws SQLException {&#10;        ps.setString(1, book.getTitle());&#10;        ps.setString(2, book.getAuthor());&#10;        ps.setString(3, book.getPublisher());&#10;        ps.setInt(4, book.getCategoryId());&#10;        ps.setInt(5, book.getStock());&#10;        ps.setDouble(6, book.getOriginalPrice());&#10;        ps.setInt(7, book.getDiscount_rate());&#10;        ps.setString(8, book.getThumbnailUrl());&#10;        ps.setString(9, book.getDescription());&#10;        ps.setObject(10, book.getPublishYear(), Types.INTEGER);&#10;        ps.setObject(11, book.getPages(), Types.INTEGER);&#10;        ps.setDouble(12, book.getRating());&#10;        ps.setDouble(13, book.getPrice());&#10;    }&#10;&#10;    /**&#10;     * Executes a query to retrieve books with dynamic parameters.&#10;     *&#10;     * @param sql    The SQL query.&#10;     * @param page   The page number.&#10;     * @param params Query parameters.&#10;     * @return List of books.&#10;     * @throws SQLException If a database error occurs.&#10;     */&#10;    private static List&lt;Book&gt; getBooksByQuery(String sql, int page, Object[] params) throws SQLException {&#10;        List&lt;Book&gt; books = new ArrayList&lt;&gt;();&#10;        try (Connection conn = DBConnection.getConnection();&#10;                PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            if (params != null) {&#10;                for (int i = 0; i &lt; params.length; i++) {&#10;                    ps.setObject(i + 1, params[i]);&#10;                }&#10;            } else {&#10;                ps.setInt(1, PAGE_SIZE);&#10;                ps.setInt(2, (page - 1) * PAGE_SIZE);&#10;            }&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                while (rs.next()) {&#10;                    books.add(mapResultSetToBook(rs));&#10;                }&#10;            }&#10;        }&#10;        return books;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/dao/CategoryBookDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/dao/CategoryBookDao.java" />
              <option name="originalContent" value="package dao;&#10;&#10;import model.Book;&#10;import util.DBConnection;&#10;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.sql.SQLException;&#10;import java.util.List;&#10;&#10;public class CategoryBookDao {&#10;    private static final int BOOKS_PER_PAGE = 40;&#10;&#10;    public static List&lt;Book&gt; getAllBook(int page) {&#10;        String sql = &quot;SELECT * FROM books LIMIT ? OFFSET ?&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;             PreparedStatement ps = conn.prepareStatement(sql)) {&#10;&#10;            ps.setInt(1, BOOKS_PER_PAGE);&#10;            ps.setInt(2, (page - 1) * BOOKS_PER_PAGE);&#10;&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                List&lt;Book&gt; books = new java.util.ArrayList&lt;&gt;();&#10;                while (rs.next()) {&#10;                    Book b = mapResultSetToBook(rs);&#10;                    books.add(b);&#10;                }&#10;                return books;&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public static int getTotalBooks() {&#10;        String sql = &quot;SELECT COUNT(*) as total FROM books&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;             PreparedStatement ps = conn.prepareStatement(sql);&#10;             ResultSet rs = ps.executeQuery()) {&#10;&#10;            if (rs.next()) {&#10;                return rs.getInt(&quot;total&quot;);&#10;            }&#10;            return 0;&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public static int getTotalPages() {&#10;        int totalBooks = getTotalBooks();&#10;        return (int) Math.ceil((double) totalBooks / BOOKS_PER_PAGE);&#10;    }&#10;&#10;    public static List&lt;Book&gt; getBooksByCategoryId(int categoryId, int page) {&#10;        String sql = &quot;SELECT * FROM books WHERE category_id = ? LIMIT ? OFFSET ?&quot;;&#10;&#10;        try (Connection conn = DBConnection.getConnection();&#10;             PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            ps.setInt(1, categoryId);&#10;            ps.setInt(2, BOOKS_PER_PAGE);&#10;            ps.setInt(3, (page - 1) * BOOKS_PER_PAGE);&#10;&#10;            try (var rs = ps.executeQuery()) {&#10;                List&lt;Book&gt; books = new java.util.ArrayList&lt;&gt;();&#10;                while (rs.next()) {&#10;                    Book b = mapResultSetToBook(rs);&#10;                    books.add(b);&#10;                }&#10;                return books;&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public static int getTotalBooksByCategory(int categoryId) {&#10;        String sql = &quot;SELECT COUNT(*) as total FROM books WHERE category_id = ?&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;             PreparedStatement ps = conn.prepareStatement(sql)) {&#10;&#10;            ps.setInt(1, categoryId);&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return rs.getInt(&quot;total&quot;);&#10;                }&#10;                return 0;&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public static int getTotalPagesByCategory(int categoryId) {&#10;        int totalBooks = getTotalBooksByCategory(categoryId);&#10;        return (int) Math.ceil((double) totalBooks / BOOKS_PER_PAGE);&#10;    }&#10;&#10;    private static Book mapResultSetToBook(ResultSet rs) throws SQLException {&#10;        Book b = new Book();&#10;        b.setId(rs.getInt(&quot;id&quot;));&#10;        b.setTitle(rs.getString(&quot;title&quot;));&#10;        b.setStock(rs.getInt(&quot;stock&quot;));&#10;        b.setAuthor(rs.getString(&quot;author&quot;));&#10;        b.setPublisher(rs.getString(&quot;publisher&quot;));&#10;        b.setThumbnailUrl(rs.getString(&quot;thumbnail_url&quot;));&#10;        b.setDescription(rs.getString(&quot;description&quot;));&#10;        b.setPublishYear(rs.getInt(&quot;publish_year&quot;));&#10;        b.setPages(rs.getInt(&quot;pages&quot;));&#10;        b.setRating(rs.getDouble(&quot;rating_average&quot;));&#10;        b.setPrice(rs.getDouble(&quot;price&quot;));&#10;        b.setOriginalPrice(rs.getDouble(&quot;original_price&quot;));&#10;        b.setDiscount_rate(rs.getInt(&quot;discount_rate&quot;));&#10;        b.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;        b.setCreatedAt(rs.getTimestamp(&quot;created_at&quot;));&#10;        return b;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package dao;&#10;&#10;import model.Book;&#10;import util.DBConnection;&#10;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.sql.SQLException;&#10;import java.util.List;&#10;&#10;public class CategoryBookDao {&#10;    private static final int BOOKS_PER_PAGE = 40;&#10;&#10;    public static List&lt;Book&gt; getAllBook(int page) {&#10;        String sql = &quot;SELECT * FROM books LIMIT ? OFFSET ?&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;             PreparedStatement ps = conn.prepareStatement(sql)) {&#10;&#10;            ps.setInt(1, BOOKS_PER_PAGE);&#10;            ps.setInt(2, (page - 1) * BOOKS_PER_PAGE);&#10;&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                List&lt;Book&gt; books = new java.util.ArrayList&lt;&gt;();&#10;                while (rs.next()) {&#10;                    Book b = mapResultSetToBook(rs);&#10;                    books.add(b);&#10;                }&#10;                return books;&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public static int getTotalBooks() {&#10;        String sql = &quot;SELECT COUNT(*) as total FROM books&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;             PreparedStatement ps = conn.prepareStatement(sql);&#10;             ResultSet rs = ps.executeQuery()) {&#10;&#10;            if (rs.next()) {&#10;                return rs.getInt(&quot;total&quot;);&#10;            }&#10;            return 0;&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public static int getTotalPages() {&#10;        int totalBooks = getTotalBooks();&#10;        return (int) Math.ceil((double) totalBooks / BOOKS_PER_PAGE);&#10;    }&#10;&#10;    public static List&lt;Book&gt; getBooksByCategoryId(int categoryId, int page) {&#10;        String sql = &quot;SELECT * FROM books WHERE category_id = ? LIMIT ? OFFSET ?&quot;;&#10;&#10;        try (Connection conn = DBConnection.getConnection();&#10;             PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            ps.setInt(1, categoryId);&#10;            ps.setInt(2, BOOKS_PER_PAGE);&#10;            ps.setInt(3, (page - 1) * BOOKS_PER_PAGE);&#10;&#10;            try (var rs = ps.executeQuery()) {&#10;                List&lt;Book&gt; books = new java.util.ArrayList&lt;&gt;();&#10;                while (rs.next()) {&#10;                    Book b = mapResultSetToBook(rs);&#10;                    books.add(b);&#10;                }&#10;                return books;&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public static int getTotalBooksByCategory(int categoryId) {&#10;        String sql = &quot;SELECT COUNT(*) as total FROM books WHERE category_id = ?&quot;;&#10;        try (Connection conn = DBConnection.getConnection();&#10;             PreparedStatement ps = conn.prepareStatement(sql)) {&#10;&#10;            ps.setInt(1, categoryId);&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return rs.getInt(&quot;total&quot;);&#10;                }&#10;                return 0;&#10;            }&#10;        } catch (SQLException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public static int getTotalPagesByCategory(int categoryId) {&#10;        int totalBooks = getTotalBooksByCategory(categoryId);&#10;        return (int) Math.ceil((double) totalBooks / BOOKS_PER_PAGE);&#10;    }&#10;&#10;    private static Book mapResultSetToBook(ResultSet rs) throws SQLException {&#10;        Book b = new Book();&#10;        b.setId(rs.getInt(&quot;id&quot;));&#10;        b.setTitle(rs.getString(&quot;title&quot;));&#10;        b.setStock(rs.getInt(&quot;stock&quot;));&#10;        b.setAuthor(rs.getString(&quot;author&quot;));&#10;        b.setPublisher(rs.getString(&quot;publisher&quot;));&#10;        b.setThumbnailUrl(rs.getString(&quot;thumbnail_url&quot;));&#10;        b.setDescription(rs.getString(&quot;description&quot;));&#10;        b.setPublishYear(rs.getInt(&quot;publish_year&quot;));&#10;        b.setPages(rs.getInt(&quot;pages&quot;));&#10;        b.setRating(rs.getDouble(&quot;rating_average&quot;));&#10;        b.setPrice(rs.getDouble(&quot;price&quot;));&#10;        b.setOriginalPrice(rs.getDouble(&quot;original_price&quot;));&#10;        b.setDiscount_rate(rs.getInt(&quot;discount_rate&quot;));&#10;        b.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;        b.setCreatedAt(rs.getTimestamp(&quot;created_at&quot;));&#10;        return b;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>