<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/constant/PathConstants.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/constant/PathConstants.java" />
              <option name="originalContent" value="package constant;&#10;&#10;public class PathConstants {&#10;    // URL pattern&#10;    public static final String BOOKS_API = &quot;/api/books&quot;;&#10;    public static final String USERS_API = &quot;/api/users&quot;;&#10;&#10;    // View paths&#10;    public static final String VIEW_LAYOUT = &quot;/WEB-INF/views/layout.jsp&quot;;&#10;    public static final String VIEW_HOME = &quot;/WEB-INF/views/home.jsp&quot;;&#10;    public static final String VIEW_HEADER = &quot;/WEB-INF/views/fragment/header.jsp&quot;;&#10;    public static final String VIEW_FOOTER = &quot;/WEB-INF/views/fragment/footer.jsp&quot;;&#10;    public static final String VIEW_SIDEBAR = &quot;/WEB-INF/views/fragment/sidebar.jsp&quot;;&#10;    public static final String VIEW_WHITELIST = &quot;/WEB-INF/views/whiteList/whiteList.jsp&quot;;&#10;}&#10;" />
              <option name="updatedContent" value="package constant;&#13;&#10;&#13;&#10;public class PathConstants {&#13;&#10;    // URL pattern&#13;&#10;    public static final String BOOKS_API = &quot;/api/books&quot;;&#13;&#10;    public static final String USERS_API = &quot;/api/users&quot;;&#13;&#10;&#13;&#10;    // View paths&#13;&#10;    public static final String VIEW_LAYOUT = &quot;/WEB-INF/views/layout.jsp&quot;;&#13;&#10;    public static final String VIEW_HOME = &quot;/WEB-INF/views/home.jsp&quot;;&#13;&#10;    public static final String VIEW_HEADER = &quot;/WEB-INF/views/fragment/header.jsp&quot;;&#13;&#10;    public static final String VIEW_FOOTER = &quot;/WEB-INF/views/fragment/footer.jsp&quot;;&#13;&#10;    public static final String VIEW_SIDEBAR = &quot;/WEB-INF/views/fragment/sidebar.jsp&quot;;&#13;&#10;    public static final String VIEW_WISHLIST = &quot;/WEB-INF/views/wishList/wishList.jsp&quot;;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/controller/WishListServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/controller/WishListServlet.java" />
              <option name="originalContent" value="package controller;&#10;&#10;import constant.PathConstants;&#10;import model.Book;&#10;import service.WishListService;&#10;&#10;import javax.servlet.ServletException;&#10;import javax.servlet.annotation.WebServlet;&#10;import javax.servlet.http.HttpServlet;&#10;import javax.servlet.http.HttpServletRequest;&#10;import javax.servlet.http.HttpServletResponse;&#10;import java.io.IOException;&#10;import java.nio.file.Path;&#10;import java.util.List;&#10;&#10;public class WhiteListServlet extends HttpServlet {&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String page = PathConstants.VIEW_WHITELIST;&#10;//        int userId = (int) req.getSession().getAttribute(&quot;userId&quot;);&#10;//        List&lt;Book&gt; books = WishListService.getWhiteListBooks(2);&#10;//        if (books.isEmpty()) {&#10;//            req.setAttribute(&quot;contentPage&quot;, page);&#10;//            req.setAttribute(&quot;books&quot;, &quot;Không có sách nào trong danh sách yêu thích.&quot;);&#10;//            req.getRequestDispatcher(PathConstants.VIEW_LAYOUT).forward(req, resp);&#10;//            return;&#10;//        }&#10;//        req.setAttribute(&quot;books&quot;, books);&#10;        req.setAttribute(&quot;contentPage&quot;, page);&#10;        req.getRequestDispatcher(PathConstants.VIEW_LAYOUT).forward(req, resp);&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        super.doPost(req, resp);&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package controller;&#10;&#10;import constant.PathConstants;&#10;&#10;import javax.servlet.ServletException;&#10;import javax.servlet.annotation.WebServlet;&#10;import javax.servlet.http.HttpServlet;&#10;import javax.servlet.http.HttpServletRequest;&#10;import javax.servlet.http.HttpServletResponse;&#10;import java.io.IOException;&#10;&#10;public class WishListServlet extends HttpServlet {&#10;    @Override&#10;    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        String page = PathConstants.VIEW_WISHLIST;&#10;        req.setAttribute(&quot;contentPage&quot;, page);&#10;        req.getRequestDispatcher(PathConstants.VIEW_LAYOUT).forward(req, resp);&#10;    }&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {&#10;        super.doPost(req, resp);&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/dao/WishListDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/dao/WishListDao.java" />
              <option name="originalContent" value="package dao;&#10;&#10;import model.Book;&#10;import util.DBConnection;&#10;&#10;import java.sql.Connection;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class WhiteListDao {&#10;    public static List&lt;Book&gt; getWhiteListBooks(int userId) {&#10;        // This is a stub implementation. Replace with actual database access code.&#10;        // For example, you might query a database to get the whitelist books for the given userId.&#10;        String sql = &quot; SELECT b.* FROM whitelist w JOIN books b ON w.book_id = b.id WHERE w.user_id = ? &quot;;&#10;&#10;        List&lt;Book&gt; books = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = DBConnection.getConnection();&#10;             PreparedStatement ps = conn.prepareStatement(sql)) {&#10;            ps.setInt(1, userId);&#10;            ResultSet rs = ps.executeQuery();&#10;            while (rs.next()) {&#10;                Book book = new Book();&#10;                book.setId(rs.getInt(&quot;id&quot;));&#10;                book.setTitle(rs.getString(&quot;title&quot;));&#10;                book.setAuthor(rs.getString(&quot;author&quot;));&#10;                book.setPublisher(rs.getString(&quot;publisher&quot;));&#10;                book.setCategoryId(rs.getInt(&quot;category_id&quot;));&#10;                book.setStock(rs.getInt(&quot;stock&quot;));&#10;                book.setOriginalPrice(rs.getDouble(&quot;original_price&quot;));&#10;                book.setDiscount_rate(rs.getInt(&quot;discount_rate&quot;));&#10;                book.setthumbnailUrl(rs.getString(&quot;image_url&quot;));&#10;                book.setDescription(rs.getString(&quot;description&quot;));&#10;                book.setPublishYear(rs.getInt(&quot;publish_year&quot;));&#10;                book.setPages(rs.getInt(&quot;pages&quot;));&#10;                book.setRating(rs.getDouble(&quot;rating&quot;));&#10;                book.setPrice(rs.getDouble(&quot;price&quot;));&#10;                book.setCreatedAt(rs.getTimestamp(&quot;created_at&quot;));&#10;&#10;                books.add(book);&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        return books;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package dao;&#13;&#10;&#13;&#10;import model.Book;&#13;&#10;import util.DBConnection;&#13;&#10;&#13;&#10;import java.sql.Connection;&#13;&#10;import java.sql.PreparedStatement;&#13;&#10;import java.sql.ResultSet;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class WishListDao {&#13;&#10;    public static List&lt;Book&gt; getWishListBooks(int userId) {&#13;&#10;        // This is a stub implementation. Replace with actual database access code.&#13;&#10;        // For example, you might query a database to get the wishlist books for the given userId.&#13;&#10;        String sql = &quot; SELECT b.* FROM wishlist w JOIN books b ON w.book_id = b.id WHERE w.user_id = ? &quot;;&#13;&#10;&#13;&#10;        List&lt;Book&gt; books = new ArrayList&lt;&gt;();&#13;&#10;&#13;&#10;        try (Connection conn = DBConnection.getConnection();&#13;&#10;             PreparedStatement ps = conn.prepareStatement(sql)) {&#13;&#10;            ps.setInt(1, userId);&#13;&#10;            ResultSet rs = ps.executeQuery();&#13;&#10;            while (rs.next()) {&#13;&#10;                Book book = new Book();&#13;&#10;                book.setId(rs.getInt(&quot;id&quot;));&#13;&#10;                book.setTitle(rs.getString(&quot;title&quot;));&#13;&#10;                book.setAuthor(rs.getString(&quot;author&quot;));&#13;&#10;                book.setPublisher(rs.getString(&quot;publisher&quot;));&#13;&#10;                book.setCategoryId(rs.getInt(&quot;category_id&quot;));&#13;&#10;                book.setStock(rs.getInt(&quot;stock&quot;));&#13;&#10;                book.setOriginalPrice(rs.getDouble(&quot;original_price&quot;));&#13;&#10;                book.setDiscount_rate(rs.getInt(&quot;discount_rate&quot;));&#13;&#10;                book.setthumbnailUrl(rs.getString(&quot;image_url&quot;));&#13;&#10;                book.setDescription(rs.getString(&quot;description&quot;));&#13;&#10;                book.setPublishYear(rs.getInt(&quot;publish_year&quot;));&#13;&#10;                book.setPages(rs.getInt(&quot;pages&quot;));&#13;&#10;                book.setRating(rs.getDouble(&quot;rating&quot;));&#13;&#10;                book.setPrice(rs.getDouble(&quot;price&quot;));&#13;&#10;                book.setCreatedAt(rs.getTimestamp(&quot;created_at&quot;));&#13;&#10;&#13;&#10;                books.add(book);&#13;&#10;            }&#13;&#10;        } catch (Exception e) {&#13;&#10;            e.printStackTrace();&#13;&#10;        }&#13;&#10;        return books;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/WishListItem.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/WishListItem.java" />
              <option name="originalContent" value="package model;&#10;&#10;import java.io.Serializable;&#10;import java.util.List;&#10;&#10;public class WhiteListItem implements Serializable {&#10;    private int userId;&#10;    private Book book;&#10;    private String addedAt;&#10;&#10;    public WhiteListItem() {&#10;    }&#10;&#10;    public WhiteListItem(int userId, Book book, String addedAt) {&#10;        this.userId = userId;&#10;        this.book = book;&#10;        this.addedAt = addedAt;&#10;    }&#10;&#10;    public int getUserId() {&#10;        return userId;&#10;    }&#10;    public void setUserId(int userId) {&#10;        this.userId = userId;&#10;    }&#10;&#10;    public Book getBook() {&#10;        return book;&#10;    }&#10;    public void setBook(Book book) {&#10;        this.book = book;&#10;    }&#10;&#10;    public String getAddedAt() {&#10;        return addedAt;&#10;    }&#10;    public void setAddedAt(String addedAt) {&#10;        this.addedAt = addedAt;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package model;&#13;&#10;&#13;&#10;import java.io.Serializable;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class WishListItem implements Serializable {&#13;&#10;    private int userId;&#13;&#10;    private Book book;&#13;&#10;    private String addedAt;&#13;&#10;&#13;&#10;    public WishListItem() {&#13;&#10;    }&#13;&#10;&#13;&#10;    public WishListItem(int userId, Book book, String addedAt) {&#13;&#10;        this.userId = userId;&#13;&#10;        this.book = book;&#13;&#10;        this.addedAt = addedAt;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getUserId() {&#13;&#10;        return userId;&#13;&#10;    }&#13;&#10;    public void setUserId(int userId) {&#13;&#10;        this.userId = userId;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Book getBook() {&#13;&#10;        return book;&#13;&#10;    }&#13;&#10;    public void setBook(Book book) {&#13;&#10;        this.book = book;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getAddedAt() {&#13;&#10;        return addedAt;&#13;&#10;    }&#13;&#10;    public void setAddedAt(String addedAt) {&#13;&#10;        this.addedAt = addedAt;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/service/WishListService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/service/WishListService.java" />
              <option name="originalContent" value="package service;&#10;&#10;import model.Book;&#10;&#10;import java.util.List;&#10;&#10;public class WishListService {&#10;    public static List&lt;Book&gt; getWhiteListBooks(int userId) {&#10;        return dao.WhiteListDao.getWhiteListBooks(userId);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package service;&#10;&#10;import model.Book;&#10;&#10;import java.util.List;&#10;&#10;public class WishListService {&#10;    public static List&lt;Book&gt; getWishListBooks(int userId) {&#10;        return dao.WishListDao.getWishListBooks(userId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>